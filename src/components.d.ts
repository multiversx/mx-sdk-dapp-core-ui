/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { IconDefinition } from "@fortawesome/free-solid-svg-icons";
import { CustomToastType, IComponentToast, ISimpleToast } from "./components/functional/toasts-list/components/transaction-toast/transaction-toast.type";
import { IAccountScreenData, IConfirmScreenData, IConnectScreenData, ILedgerConnectPanelData } from "./components/functional/ledger-connect-components/ledger-connect.types";
import { IEventBus } from "./utils/EventBus";
import { IMvxGenericModalProps } from "./common/mvx-generic-modal/mvx-generic-modal.types";
import { IMvxTransactionAccount, IMvxTransactionIconInfo, IMvxTransactionsTableRow } from "./components/controlled/mvx-transactions-table/mvx-transactions-table.type";
import { IMvxTransactionValue } from "./components/controlled/mvx-transactions-table/mvx-transactions-table.type";
import { IPendingTransactionsPanelData } from "./components/functional/pending-transactions-panel/pending-transactions-panel.types";
import { ProviderTypeEnum } from "./types/provider.types";
import { SidePanelSideEnum } from "./components/visual/side-panel/side-panel.types";
import { LocalJSX as JSX, VNode } from "@stencil/core";
import { ISignTransactionsPanelData } from "./components/functional/sign-transactions-panel/sign-transactions-panel.types";
import { CustomToastType as CustomToastType1, IToastDataState, ITransactionProgressState, ITransactionToast } from "./components/functional/toasts-list/components/transaction-toast/transaction-toast.type";
import { ITransactionListItem } from "./components/visual/transaction-list-item/transaction-list-item.types";
import { ITransactionListItem as ITransactionListItem1 } from "./components/visual/transaction-list-item/transaction-list-item.types";
import { IWalletConnectPanelData } from "./components/functional/wallet-connect-components/wallet-connect-panel.types";
export { IconDefinition } from "@fortawesome/free-solid-svg-icons";
export { CustomToastType, IComponentToast, ISimpleToast } from "./components/functional/toasts-list/components/transaction-toast/transaction-toast.type";
export { IAccountScreenData, IConfirmScreenData, IConnectScreenData, ILedgerConnectPanelData } from "./components/functional/ledger-connect-components/ledger-connect.types";
export { IEventBus } from "./utils/EventBus";
export { IMvxGenericModalProps } from "./common/mvx-generic-modal/mvx-generic-modal.types";
export { IMvxTransactionAccount, IMvxTransactionIconInfo, IMvxTransactionsTableRow } from "./components/controlled/mvx-transactions-table/mvx-transactions-table.type";
export { IMvxTransactionValue } from "./components/controlled/mvx-transactions-table/mvx-transactions-table.type";
export { IPendingTransactionsPanelData } from "./components/functional/pending-transactions-panel/pending-transactions-panel.types";
export { ProviderTypeEnum } from "./types/provider.types";
export { SidePanelSideEnum } from "./components/visual/side-panel/side-panel.types";
export { LocalJSX as JSX, VNode } from "@stencil/core";
export { ISignTransactionsPanelData } from "./components/functional/sign-transactions-panel/sign-transactions-panel.types";
export { CustomToastType as CustomToastType1, IToastDataState, ITransactionProgressState, ITransactionToast } from "./components/functional/toasts-list/components/transaction-toast/transaction-toast.type";
export { ITransactionListItem } from "./components/visual/transaction-list-item/transaction-list-item.types";
export { ITransactionListItem as ITransactionListItem1 } from "./components/visual/transaction-list-item/transaction-list-item.types";
export { IWalletConnectPanelData } from "./components/functional/wallet-connect-components/wallet-connect-panel.types";
export namespace Components {
    interface BalanceComponent {
        "amount": string;
        "header"?: string;
        "ticker": string;
        "usdValue"?: string;
    }
    interface CopyButton {
        "class"?: string;
        "copyIcon"?: IconDefinition;
        "iconClass"?: string;
        "successIcon"?: IconDefinition;
        "text": string;
    }
    interface CustomToast {
        "toast": IComponentToast;
    }
    interface ExplorerLink {
        "class"?: string;
        "dataTestId"?: string;
        "icon"?: IconDefinition;
        "iconClass"?: string;
        "link": string;
        "text"?: string;
    }
    interface FaIcon {
        "class"?: string;
        "description"?: string;
        "icon": IconDefinition | string;
    }
    interface FungibleComponent {
    }
    interface GenericToast {
        "toast": CustomToastType;
    }
    interface LedgerAccountScreen {
        "accountScreenData": IAccountScreenData;
        "selectedIndex": number;
    }
    interface LedgerConfirmScreen {
        "confirmScreenData": IConfirmScreenData;
    }
    interface LedgerConnect {
        "data": ILedgerConnectPanelData;
        "getEventBus": () => Promise<IEventBus>;
    }
    interface LedgerConnectPanel {
        "data": ILedgerConnectPanelData;
        "getEventBus": () => Promise<IEventBus>;
    }
    interface LedgerConnectScreen {
        "connectScreenData": IConnectScreenData;
    }
    interface MvxFormatAmount {
        "class"?: string;
        "dataTestId"?: string;
        "isValid": boolean;
        "label"?: string;
        "labelClass"?: string;
        "showLabel"?: boolean;
        "valueDecimal": string;
        "valueInteger": string;
    }
    interface MvxGenericModal {
        "body": IMvxGenericModalProps['body'];
        "modalSubtitle"?: IMvxGenericModalProps['modalSubtitle'];
        "modalTitle": IMvxGenericModalProps['modalTitle'];
    }
    interface MvxGenericSpinner {
    }
    interface MvxTransactionAccount {
        "account": IMvxTransactionAccount;
        "class"?: string;
        "dataTestId"?: string;
        "scope": 'receiver' | 'sender';
        "showLockedAccounts": boolean;
    }
    interface MvxTransactionAccountName {
        "address": string;
        "class"?: string;
        "dataTestId"?: string;
        "description": string;
        "name"?: string;
    }
    interface MvxTransactionAge {
        "age": string;
        "class"?: string;
        "tooltip"?: string;
    }
    interface MvxTransactionDirectionBadge {
        "class"?: string;
        "direction": string;
    }
    interface MvxTransactionHash {
        "class"?: string;
        "transaction": IMvxTransactionsTableRow;
    }
    interface MvxTransactionIcon {
        "class"?: string;
        "iconInfo": IMvxTransactionIconInfo;
    }
    interface MvxTransactionMethod {
        "actionDescription": string;
        "class"?: string;
        "method": string;
    }
    interface MvxTransactionShards {
        "class"?: string;
        "transaction": IMvxTransactionsTableRow;
    }
    interface MvxTransactionValue {
        "class"?: string;
        "value": IMvxTransactionValue;
    }
    interface MvxTransactionsTable {
        "class"?: string;
        "transactions": IMvxTransactionsTableRow[];
    }
    interface MvxUnlockButton {
        "icon": HTMLElement;
        "label": string;
    }
    interface NotificationsFeed {
        "getEventBus": () => Promise<IEventBus>;
    }
    interface PendingTransactionsPanel {
        "data": IPendingTransactionsPanelData;
        "getEventBus": () => Promise<IEventBus>;
    }
    interface ProviderButton {
        "type": ProviderTypeEnum;
    }
    interface SidePanel {
        "isOpen": boolean;
        "panelClassName"?: string;
        "side": SidePanelSideEnum;
    }
    interface SignTransactionComponent {
        "header": VNode;
    }
    interface SignTransactionsPanel {
        "data": ISignTransactionsPanelData;
        "getEventBus": () => Promise<IEventBus>;
    }
    interface SimpleToast {
        "toast": ISimpleToast;
    }
    interface ToastList {
        "customToasts": CustomToastType1[];
        "getEventBus": () => Promise<IEventBus>;
        "transactionToasts": ITransactionToast[];
    }
    interface TokenComponent {
    }
    interface TransactionFeeComponent {
    }
    interface TransactionListItem {
        "transaction": ITransactionListItem;
    }
    interface TransactionToast {
        "fullWidth"?: boolean;
        "processedTransactionsStatus": string | JSX.Element;
        "toastDataState": IToastDataState;
        "toastId": string;
        "transactionProgressState"?: ITransactionProgressState;
        "transactions": ITransactionListItem[];
        "wrapperClass": string;
    }
    interface TransactionToastContent {
        "fullWidth"?: boolean;
        "processedTransactionsStatus"?: string | JSX.Element;
        "toastDataState": IToastDataState;
        "transactions": ITransactionListItem[];
    }
    interface TransactionToastDetails {
        "maxShownTransactions": number;
        "processedTransactionsStatus"?: string | JSX.Element;
        "transactionClass": string;
        "transactions"?: ITransactionListItem[];
    }
    interface TransactionToastDetailsBody {
        "hash": string;
        "index": string;
        "link": string;
        "status"?: string;
        "transactionClass"?: string;
    }
    interface TransactionToastProgress {
        "endTime"?: number;
        "startTime"?: number;
    }
    interface TrimText {
        "class"?: string;
        "dataTestId"?: string;
        "text": string;
    }
    interface UnlockHeader {
        "backIcon"?: IconDefinition;
        "closeIcon": IconDefinition;
        "text": string;
    }
    interface UnlockPanel {
        "allowedProviders"?: ProviderTypeEnum[];
        "isOpen": boolean;
    }
    interface WalletConnect {
        "data": IWalletConnectPanelData;
        "getEventBus": () => Promise<IEventBus>;
    }
    interface WalletConnectBody {
        "description": string;
        "qrCodeSvg": string;
    }
    interface WalletConnectPanel {
        "data": IWalletConnectPanelData;
        "getEventBus": () => Promise<IEventBus>;
    }
}
export interface CustomToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCustomToastElement;
}
export interface GenericToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGenericToastElement;
}
export interface LedgerAccountScreenCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLedgerAccountScreenElement;
}
export interface LedgerConnectScreenCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLedgerConnectScreenElement;
}
export interface MvxGenericModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMvxGenericModalElement;
}
export interface SidePanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSidePanelElement;
}
export interface SimpleToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSimpleToastElement;
}
export interface TransactionToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTransactionToastElement;
}
export interface TransactionToastContentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTransactionToastContentElement;
}
export interface UnlockHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUnlockHeaderElement;
}
export interface UnlockPanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUnlockPanelElement;
}
declare global {
    interface HTMLBalanceComponentElement extends Components.BalanceComponent, HTMLStencilElement {
    }
    var HTMLBalanceComponentElement: {
        prototype: HTMLBalanceComponentElement;
        new (): HTMLBalanceComponentElement;
    };
    interface HTMLCopyButtonElement extends Components.CopyButton, HTMLStencilElement {
    }
    var HTMLCopyButtonElement: {
        prototype: HTMLCopyButtonElement;
        new (): HTMLCopyButtonElement;
    };
    interface HTMLCustomToastElementEventMap {
        "deleteToast": string;
    }
    interface HTMLCustomToastElement extends Components.CustomToast, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCustomToastElementEventMap>(type: K, listener: (this: HTMLCustomToastElement, ev: CustomToastCustomEvent<HTMLCustomToastElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCustomToastElementEventMap>(type: K, listener: (this: HTMLCustomToastElement, ev: CustomToastCustomEvent<HTMLCustomToastElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCustomToastElement: {
        prototype: HTMLCustomToastElement;
        new (): HTMLCustomToastElement;
    };
    interface HTMLExplorerLinkElement extends Components.ExplorerLink, HTMLStencilElement {
    }
    var HTMLExplorerLinkElement: {
        prototype: HTMLExplorerLinkElement;
        new (): HTMLExplorerLinkElement;
    };
    interface HTMLFaIconElement extends Components.FaIcon, HTMLStencilElement {
    }
    var HTMLFaIconElement: {
        prototype: HTMLFaIconElement;
        new (): HTMLFaIconElement;
    };
    interface HTMLFungibleComponentElement extends Components.FungibleComponent, HTMLStencilElement {
    }
    var HTMLFungibleComponentElement: {
        prototype: HTMLFungibleComponentElement;
        new (): HTMLFungibleComponentElement;
    };
    interface HTMLGenericToastElementEventMap {
        "deleteToast": string;
    }
    interface HTMLGenericToastElement extends Components.GenericToast, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGenericToastElementEventMap>(type: K, listener: (this: HTMLGenericToastElement, ev: GenericToastCustomEvent<HTMLGenericToastElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGenericToastElementEventMap>(type: K, listener: (this: HTMLGenericToastElement, ev: GenericToastCustomEvent<HTMLGenericToastElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGenericToastElement: {
        prototype: HTMLGenericToastElement;
        new (): HTMLGenericToastElement;
    };
    interface HTMLLedgerAccountScreenElementEventMap {
        "selectAccount": any;
        "nextPage": any;
        "prevPage": any;
        "accessWallet": any;
    }
    interface HTMLLedgerAccountScreenElement extends Components.LedgerAccountScreen, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLedgerAccountScreenElementEventMap>(type: K, listener: (this: HTMLLedgerAccountScreenElement, ev: LedgerAccountScreenCustomEvent<HTMLLedgerAccountScreenElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLedgerAccountScreenElementEventMap>(type: K, listener: (this: HTMLLedgerAccountScreenElement, ev: LedgerAccountScreenCustomEvent<HTMLLedgerAccountScreenElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLedgerAccountScreenElement: {
        prototype: HTMLLedgerAccountScreenElement;
        new (): HTMLLedgerAccountScreenElement;
    };
    interface HTMLLedgerConfirmScreenElement extends Components.LedgerConfirmScreen, HTMLStencilElement {
    }
    var HTMLLedgerConfirmScreenElement: {
        prototype: HTMLLedgerConfirmScreenElement;
        new (): HTMLLedgerConfirmScreenElement;
    };
    interface HTMLLedgerConnectElement extends Components.LedgerConnect, HTMLStencilElement {
    }
    var HTMLLedgerConnectElement: {
        prototype: HTMLLedgerConnectElement;
        new (): HTMLLedgerConnectElement;
    };
    interface HTMLLedgerConnectPanelElement extends Components.LedgerConnectPanel, HTMLStencilElement {
    }
    var HTMLLedgerConnectPanelElement: {
        prototype: HTMLLedgerConnectPanelElement;
        new (): HTMLLedgerConnectPanelElement;
    };
    interface HTMLLedgerConnectScreenElementEventMap {
        "connect": any;
    }
    interface HTMLLedgerConnectScreenElement extends Components.LedgerConnectScreen, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLedgerConnectScreenElementEventMap>(type: K, listener: (this: HTMLLedgerConnectScreenElement, ev: LedgerConnectScreenCustomEvent<HTMLLedgerConnectScreenElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLedgerConnectScreenElementEventMap>(type: K, listener: (this: HTMLLedgerConnectScreenElement, ev: LedgerConnectScreenCustomEvent<HTMLLedgerConnectScreenElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLedgerConnectScreenElement: {
        prototype: HTMLLedgerConnectScreenElement;
        new (): HTMLLedgerConnectScreenElement;
    };
    interface HTMLMvxFormatAmountElement extends Components.MvxFormatAmount, HTMLStencilElement {
    }
    var HTMLMvxFormatAmountElement: {
        prototype: HTMLMvxFormatAmountElement;
        new (): HTMLMvxFormatAmountElement;
    };
    interface HTMLMvxGenericModalElementEventMap {
        "close": any;
    }
    interface HTMLMvxGenericModalElement extends Components.MvxGenericModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMvxGenericModalElementEventMap>(type: K, listener: (this: HTMLMvxGenericModalElement, ev: MvxGenericModalCustomEvent<HTMLMvxGenericModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMvxGenericModalElementEventMap>(type: K, listener: (this: HTMLMvxGenericModalElement, ev: MvxGenericModalCustomEvent<HTMLMvxGenericModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMvxGenericModalElement: {
        prototype: HTMLMvxGenericModalElement;
        new (): HTMLMvxGenericModalElement;
    };
    interface HTMLMvxGenericSpinnerElement extends Components.MvxGenericSpinner, HTMLStencilElement {
    }
    var HTMLMvxGenericSpinnerElement: {
        prototype: HTMLMvxGenericSpinnerElement;
        new (): HTMLMvxGenericSpinnerElement;
    };
    interface HTMLMvxTransactionAccountElement extends Components.MvxTransactionAccount, HTMLStencilElement {
    }
    var HTMLMvxTransactionAccountElement: {
        prototype: HTMLMvxTransactionAccountElement;
        new (): HTMLMvxTransactionAccountElement;
    };
    interface HTMLMvxTransactionAccountNameElement extends Components.MvxTransactionAccountName, HTMLStencilElement {
    }
    var HTMLMvxTransactionAccountNameElement: {
        prototype: HTMLMvxTransactionAccountNameElement;
        new (): HTMLMvxTransactionAccountNameElement;
    };
    interface HTMLMvxTransactionAgeElement extends Components.MvxTransactionAge, HTMLStencilElement {
    }
    var HTMLMvxTransactionAgeElement: {
        prototype: HTMLMvxTransactionAgeElement;
        new (): HTMLMvxTransactionAgeElement;
    };
    interface HTMLMvxTransactionDirectionBadgeElement extends Components.MvxTransactionDirectionBadge, HTMLStencilElement {
    }
    var HTMLMvxTransactionDirectionBadgeElement: {
        prototype: HTMLMvxTransactionDirectionBadgeElement;
        new (): HTMLMvxTransactionDirectionBadgeElement;
    };
    interface HTMLMvxTransactionHashElement extends Components.MvxTransactionHash, HTMLStencilElement {
    }
    var HTMLMvxTransactionHashElement: {
        prototype: HTMLMvxTransactionHashElement;
        new (): HTMLMvxTransactionHashElement;
    };
    interface HTMLMvxTransactionIconElement extends Components.MvxTransactionIcon, HTMLStencilElement {
    }
    var HTMLMvxTransactionIconElement: {
        prototype: HTMLMvxTransactionIconElement;
        new (): HTMLMvxTransactionIconElement;
    };
    interface HTMLMvxTransactionMethodElement extends Components.MvxTransactionMethod, HTMLStencilElement {
    }
    var HTMLMvxTransactionMethodElement: {
        prototype: HTMLMvxTransactionMethodElement;
        new (): HTMLMvxTransactionMethodElement;
    };
    interface HTMLMvxTransactionShardsElement extends Components.MvxTransactionShards, HTMLStencilElement {
    }
    var HTMLMvxTransactionShardsElement: {
        prototype: HTMLMvxTransactionShardsElement;
        new (): HTMLMvxTransactionShardsElement;
    };
    interface HTMLMvxTransactionValueElement extends Components.MvxTransactionValue, HTMLStencilElement {
    }
    var HTMLMvxTransactionValueElement: {
        prototype: HTMLMvxTransactionValueElement;
        new (): HTMLMvxTransactionValueElement;
    };
    interface HTMLMvxTransactionsTableElement extends Components.MvxTransactionsTable, HTMLStencilElement {
    }
    var HTMLMvxTransactionsTableElement: {
        prototype: HTMLMvxTransactionsTableElement;
        new (): HTMLMvxTransactionsTableElement;
    };
    interface HTMLMvxUnlockButtonElement extends Components.MvxUnlockButton, HTMLStencilElement {
    }
    var HTMLMvxUnlockButtonElement: {
        prototype: HTMLMvxUnlockButtonElement;
        new (): HTMLMvxUnlockButtonElement;
    };
    interface HTMLNotificationsFeedElement extends Components.NotificationsFeed, HTMLStencilElement {
    }
    var HTMLNotificationsFeedElement: {
        prototype: HTMLNotificationsFeedElement;
        new (): HTMLNotificationsFeedElement;
    };
    interface HTMLPendingTransactionsPanelElement extends Components.PendingTransactionsPanel, HTMLStencilElement {
    }
    var HTMLPendingTransactionsPanelElement: {
        prototype: HTMLPendingTransactionsPanelElement;
        new (): HTMLPendingTransactionsPanelElement;
    };
    interface HTMLProviderButtonElement extends Components.ProviderButton, HTMLStencilElement {
    }
    var HTMLProviderButtonElement: {
        prototype: HTMLProviderButtonElement;
        new (): HTMLProviderButtonElement;
    };
    interface HTMLSidePanelElementEventMap {
        "close": any;
    }
    interface HTMLSidePanelElement extends Components.SidePanel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSidePanelElementEventMap>(type: K, listener: (this: HTMLSidePanelElement, ev: SidePanelCustomEvent<HTMLSidePanelElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSidePanelElementEventMap>(type: K, listener: (this: HTMLSidePanelElement, ev: SidePanelCustomEvent<HTMLSidePanelElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSidePanelElement: {
        prototype: HTMLSidePanelElement;
        new (): HTMLSidePanelElement;
    };
    interface HTMLSignTransactionComponentElement extends Components.SignTransactionComponent, HTMLStencilElement {
    }
    var HTMLSignTransactionComponentElement: {
        prototype: HTMLSignTransactionComponentElement;
        new (): HTMLSignTransactionComponentElement;
    };
    interface HTMLSignTransactionsPanelElement extends Components.SignTransactionsPanel, HTMLStencilElement {
    }
    var HTMLSignTransactionsPanelElement: {
        prototype: HTMLSignTransactionsPanelElement;
        new (): HTMLSignTransactionsPanelElement;
    };
    interface HTMLSimpleToastElementEventMap {
        "deleteToast": void;
    }
    interface HTMLSimpleToastElement extends Components.SimpleToast, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSimpleToastElementEventMap>(type: K, listener: (this: HTMLSimpleToastElement, ev: SimpleToastCustomEvent<HTMLSimpleToastElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSimpleToastElementEventMap>(type: K, listener: (this: HTMLSimpleToastElement, ev: SimpleToastCustomEvent<HTMLSimpleToastElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSimpleToastElement: {
        prototype: HTMLSimpleToastElement;
        new (): HTMLSimpleToastElement;
    };
    interface HTMLToastListElement extends Components.ToastList, HTMLStencilElement {
    }
    var HTMLToastListElement: {
        prototype: HTMLToastListElement;
        new (): HTMLToastListElement;
    };
    interface HTMLTokenComponentElement extends Components.TokenComponent, HTMLStencilElement {
    }
    var HTMLTokenComponentElement: {
        prototype: HTMLTokenComponentElement;
        new (): HTMLTokenComponentElement;
    };
    interface HTMLTransactionFeeComponentElement extends Components.TransactionFeeComponent, HTMLStencilElement {
    }
    var HTMLTransactionFeeComponentElement: {
        prototype: HTMLTransactionFeeComponentElement;
        new (): HTMLTransactionFeeComponentElement;
    };
    interface HTMLTransactionListItemElement extends Components.TransactionListItem, HTMLStencilElement {
    }
    var HTMLTransactionListItemElement: {
        prototype: HTMLTransactionListItemElement;
        new (): HTMLTransactionListItemElement;
    };
    interface HTMLTransactionToastElementEventMap {
        "deleteToast": void;
    }
    interface HTMLTransactionToastElement extends Components.TransactionToast, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTransactionToastElementEventMap>(type: K, listener: (this: HTMLTransactionToastElement, ev: TransactionToastCustomEvent<HTMLTransactionToastElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTransactionToastElementEventMap>(type: K, listener: (this: HTMLTransactionToastElement, ev: TransactionToastCustomEvent<HTMLTransactionToastElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTransactionToastElement: {
        prototype: HTMLTransactionToastElement;
        new (): HTMLTransactionToastElement;
    };
    interface HTMLTransactionToastContentElementEventMap {
        "deleteToast": void;
    }
    interface HTMLTransactionToastContentElement extends Components.TransactionToastContent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTransactionToastContentElementEventMap>(type: K, listener: (this: HTMLTransactionToastContentElement, ev: TransactionToastContentCustomEvent<HTMLTransactionToastContentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTransactionToastContentElementEventMap>(type: K, listener: (this: HTMLTransactionToastContentElement, ev: TransactionToastContentCustomEvent<HTMLTransactionToastContentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTransactionToastContentElement: {
        prototype: HTMLTransactionToastContentElement;
        new (): HTMLTransactionToastContentElement;
    };
    interface HTMLTransactionToastDetailsElement extends Components.TransactionToastDetails, HTMLStencilElement {
    }
    var HTMLTransactionToastDetailsElement: {
        prototype: HTMLTransactionToastDetailsElement;
        new (): HTMLTransactionToastDetailsElement;
    };
    interface HTMLTransactionToastDetailsBodyElement extends Components.TransactionToastDetailsBody, HTMLStencilElement {
    }
    var HTMLTransactionToastDetailsBodyElement: {
        prototype: HTMLTransactionToastDetailsBodyElement;
        new (): HTMLTransactionToastDetailsBodyElement;
    };
    interface HTMLTransactionToastProgressElement extends Components.TransactionToastProgress, HTMLStencilElement {
    }
    var HTMLTransactionToastProgressElement: {
        prototype: HTMLTransactionToastProgressElement;
        new (): HTMLTransactionToastProgressElement;
    };
    interface HTMLTrimTextElement extends Components.TrimText, HTMLStencilElement {
    }
    var HTMLTrimTextElement: {
        prototype: HTMLTrimTextElement;
        new (): HTMLTrimTextElement;
    };
    interface HTMLUnlockHeaderElementEventMap {
        "back": void;
        "close": void;
    }
    interface HTMLUnlockHeaderElement extends Components.UnlockHeader, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUnlockHeaderElementEventMap>(type: K, listener: (this: HTMLUnlockHeaderElement, ev: UnlockHeaderCustomEvent<HTMLUnlockHeaderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUnlockHeaderElementEventMap>(type: K, listener: (this: HTMLUnlockHeaderElement, ev: UnlockHeaderCustomEvent<HTMLUnlockHeaderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUnlockHeaderElement: {
        prototype: HTMLUnlockHeaderElement;
        new (): HTMLUnlockHeaderElement;
    };
    interface HTMLUnlockPanelElementEventMap {
        "close": any;
        "login": { provider: ProviderTypeEnum; anchor?: HTMLElement };
    }
    interface HTMLUnlockPanelElement extends Components.UnlockPanel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUnlockPanelElementEventMap>(type: K, listener: (this: HTMLUnlockPanelElement, ev: UnlockPanelCustomEvent<HTMLUnlockPanelElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUnlockPanelElementEventMap>(type: K, listener: (this: HTMLUnlockPanelElement, ev: UnlockPanelCustomEvent<HTMLUnlockPanelElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUnlockPanelElement: {
        prototype: HTMLUnlockPanelElement;
        new (): HTMLUnlockPanelElement;
    };
    interface HTMLWalletConnectElement extends Components.WalletConnect, HTMLStencilElement {
    }
    var HTMLWalletConnectElement: {
        prototype: HTMLWalletConnectElement;
        new (): HTMLWalletConnectElement;
    };
    interface HTMLWalletConnectBodyElement extends Components.WalletConnectBody, HTMLStencilElement {
    }
    var HTMLWalletConnectBodyElement: {
        prototype: HTMLWalletConnectBodyElement;
        new (): HTMLWalletConnectBodyElement;
    };
    interface HTMLWalletConnectPanelElement extends Components.WalletConnectPanel, HTMLStencilElement {
    }
    var HTMLWalletConnectPanelElement: {
        prototype: HTMLWalletConnectPanelElement;
        new (): HTMLWalletConnectPanelElement;
    };
    interface HTMLElementTagNameMap {
        "balance-component": HTMLBalanceComponentElement;
        "copy-button": HTMLCopyButtonElement;
        "custom-toast": HTMLCustomToastElement;
        "explorer-link": HTMLExplorerLinkElement;
        "fa-icon": HTMLFaIconElement;
        "fungible-component": HTMLFungibleComponentElement;
        "generic-toast": HTMLGenericToastElement;
        "ledger-account-screen": HTMLLedgerAccountScreenElement;
        "ledger-confirm-screen": HTMLLedgerConfirmScreenElement;
        "ledger-connect": HTMLLedgerConnectElement;
        "ledger-connect-panel": HTMLLedgerConnectPanelElement;
        "ledger-connect-screen": HTMLLedgerConnectScreenElement;
        "mvx-format-amount": HTMLMvxFormatAmountElement;
        "mvx-generic-modal": HTMLMvxGenericModalElement;
        "mvx-generic-spinner": HTMLMvxGenericSpinnerElement;
        "mvx-transaction-account": HTMLMvxTransactionAccountElement;
        "mvx-transaction-account-name": HTMLMvxTransactionAccountNameElement;
        "mvx-transaction-age": HTMLMvxTransactionAgeElement;
        "mvx-transaction-direction-badge": HTMLMvxTransactionDirectionBadgeElement;
        "mvx-transaction-hash": HTMLMvxTransactionHashElement;
        "mvx-transaction-icon": HTMLMvxTransactionIconElement;
        "mvx-transaction-method": HTMLMvxTransactionMethodElement;
        "mvx-transaction-shards": HTMLMvxTransactionShardsElement;
        "mvx-transaction-value": HTMLMvxTransactionValueElement;
        "mvx-transactions-table": HTMLMvxTransactionsTableElement;
        "mvx-unlock-button": HTMLMvxUnlockButtonElement;
        "notifications-feed": HTMLNotificationsFeedElement;
        "pending-transactions-panel": HTMLPendingTransactionsPanelElement;
        "provider-button": HTMLProviderButtonElement;
        "side-panel": HTMLSidePanelElement;
        "sign-transaction-component": HTMLSignTransactionComponentElement;
        "sign-transactions-panel": HTMLSignTransactionsPanelElement;
        "simple-toast": HTMLSimpleToastElement;
        "toast-list": HTMLToastListElement;
        "token-component": HTMLTokenComponentElement;
        "transaction-fee-component": HTMLTransactionFeeComponentElement;
        "transaction-list-item": HTMLTransactionListItemElement;
        "transaction-toast": HTMLTransactionToastElement;
        "transaction-toast-content": HTMLTransactionToastContentElement;
        "transaction-toast-details": HTMLTransactionToastDetailsElement;
        "transaction-toast-details-body": HTMLTransactionToastDetailsBodyElement;
        "transaction-toast-progress": HTMLTransactionToastProgressElement;
        "trim-text": HTMLTrimTextElement;
        "unlock-header": HTMLUnlockHeaderElement;
        "unlock-panel": HTMLUnlockPanelElement;
        "wallet-connect": HTMLWalletConnectElement;
        "wallet-connect-body": HTMLWalletConnectBodyElement;
        "wallet-connect-panel": HTMLWalletConnectPanelElement;
    }
}
declare namespace LocalJSX {
    interface BalanceComponent {
        "amount"?: string;
        "header"?: string;
        "ticker"?: string;
        "usdValue"?: string;
    }
    interface CopyButton {
        "class"?: string;
        "copyIcon"?: IconDefinition;
        "iconClass"?: string;
        "successIcon"?: IconDefinition;
        "text"?: string;
    }
    interface CustomToast {
        "onDeleteToast"?: (event: CustomToastCustomEvent<string>) => void;
        "toast"?: IComponentToast;
    }
    interface ExplorerLink {
        "class"?: string;
        "dataTestId"?: string;
        "icon"?: IconDefinition;
        "iconClass"?: string;
        "link"?: string;
        "text"?: string;
    }
    interface FaIcon {
        "class"?: string;
        "description"?: string;
        "icon"?: IconDefinition | string;
    }
    interface FungibleComponent {
    }
    interface GenericToast {
        "onDeleteToast"?: (event: GenericToastCustomEvent<string>) => void;
        "toast"?: CustomToastType;
    }
    interface LedgerAccountScreen {
        "accountScreenData"?: IAccountScreenData;
        "onAccessWallet"?: (event: LedgerAccountScreenCustomEvent<any>) => void;
        "onNextPage"?: (event: LedgerAccountScreenCustomEvent<any>) => void;
        "onPrevPage"?: (event: LedgerAccountScreenCustomEvent<any>) => void;
        "onSelectAccount"?: (event: LedgerAccountScreenCustomEvent<any>) => void;
        "selectedIndex"?: number;
    }
    interface LedgerConfirmScreen {
        "confirmScreenData"?: IConfirmScreenData;
    }
    interface LedgerConnect {
        "data"?: ILedgerConnectPanelData;
    }
    interface LedgerConnectPanel {
        "data"?: ILedgerConnectPanelData;
    }
    interface LedgerConnectScreen {
        "connectScreenData"?: IConnectScreenData;
        "onConnect"?: (event: LedgerConnectScreenCustomEvent<any>) => void;
    }
    interface MvxFormatAmount {
        "class"?: string;
        "dataTestId"?: string;
        "isValid"?: boolean;
        "label"?: string;
        "labelClass"?: string;
        "showLabel"?: boolean;
        "valueDecimal"?: string;
        "valueInteger"?: string;
    }
    interface MvxGenericModal {
        "body"?: IMvxGenericModalProps['body'];
        "modalSubtitle"?: IMvxGenericModalProps['modalSubtitle'];
        "modalTitle"?: IMvxGenericModalProps['modalTitle'];
        "onClose"?: (event: MvxGenericModalCustomEvent<any>) => void;
    }
    interface MvxGenericSpinner {
    }
    interface MvxTransactionAccount {
        "account"?: IMvxTransactionAccount;
        "class"?: string;
        "dataTestId"?: string;
        "scope"?: 'receiver' | 'sender';
        "showLockedAccounts"?: boolean;
    }
    interface MvxTransactionAccountName {
        "address"?: string;
        "class"?: string;
        "dataTestId"?: string;
        "description"?: string;
        "name"?: string;
    }
    interface MvxTransactionAge {
        "age"?: string;
        "class"?: string;
        "tooltip"?: string;
    }
    interface MvxTransactionDirectionBadge {
        "class"?: string;
        "direction"?: string;
    }
    interface MvxTransactionHash {
        "class"?: string;
        "transaction"?: IMvxTransactionsTableRow;
    }
    interface MvxTransactionIcon {
        "class"?: string;
        "iconInfo"?: IMvxTransactionIconInfo;
    }
    interface MvxTransactionMethod {
        "actionDescription"?: string;
        "class"?: string;
        "method"?: string;
    }
    interface MvxTransactionShards {
        "class"?: string;
        "transaction"?: IMvxTransactionsTableRow;
    }
    interface MvxTransactionValue {
        "class"?: string;
        "value"?: IMvxTransactionValue;
    }
    interface MvxTransactionsTable {
        "class"?: string;
        "transactions"?: IMvxTransactionsTableRow[];
    }
    interface MvxUnlockButton {
        "icon"?: HTMLElement;
        "label"?: string;
    }
    interface NotificationsFeed {
    }
    interface PendingTransactionsPanel {
        "data"?: IPendingTransactionsPanelData;
    }
    interface ProviderButton {
        "type"?: ProviderTypeEnum;
    }
    interface SidePanel {
        "isOpen"?: boolean;
        "onClose"?: (event: SidePanelCustomEvent<any>) => void;
        "panelClassName"?: string;
        "side"?: SidePanelSideEnum;
    }
    interface SignTransactionComponent {
        "header"?: VNode;
    }
    interface SignTransactionsPanel {
        "data"?: ISignTransactionsPanelData;
    }
    interface SimpleToast {
        "onDeleteToast"?: (event: SimpleToastCustomEvent<void>) => void;
        "toast"?: ISimpleToast;
    }
    interface ToastList {
        "customToasts"?: CustomToastType1[];
        "transactionToasts"?: ITransactionToast[];
    }
    interface TokenComponent {
    }
    interface TransactionFeeComponent {
    }
    interface TransactionListItem {
        "transaction"?: ITransactionListItem;
    }
    interface TransactionToast {
        "fullWidth"?: boolean;
        "onDeleteToast"?: (event: TransactionToastCustomEvent<void>) => void;
        "processedTransactionsStatus"?: string | JSX.Element;
        "toastDataState"?: IToastDataState;
        "toastId"?: string;
        "transactionProgressState"?: ITransactionProgressState;
        "transactions"?: ITransactionListItem[];
        "wrapperClass"?: string;
    }
    interface TransactionToastContent {
        "fullWidth"?: boolean;
        "onDeleteToast"?: (event: TransactionToastContentCustomEvent<void>) => void;
        "processedTransactionsStatus"?: string | JSX.Element;
        "toastDataState"?: IToastDataState;
        "transactions"?: ITransactionListItem[];
    }
    interface TransactionToastDetails {
        "maxShownTransactions"?: number;
        "processedTransactionsStatus"?: string | JSX.Element;
        "transactionClass"?: string;
        "transactions"?: ITransactionListItem[];
    }
    interface TransactionToastDetailsBody {
        "hash"?: string;
        "index"?: string;
        "link"?: string;
        "status"?: string;
        "transactionClass"?: string;
    }
    interface TransactionToastProgress {
        "endTime"?: number;
        "startTime"?: number;
    }
    interface TrimText {
        "class"?: string;
        "dataTestId"?: string;
        "text"?: string;
    }
    interface UnlockHeader {
        "backIcon"?: IconDefinition;
        "closeIcon"?: IconDefinition;
        "onBack"?: (event: UnlockHeaderCustomEvent<void>) => void;
        "onClose"?: (event: UnlockHeaderCustomEvent<void>) => void;
        "text"?: string;
    }
    interface UnlockPanel {
        "allowedProviders"?: ProviderTypeEnum[];
        "isOpen"?: boolean;
        "onClose"?: (event: UnlockPanelCustomEvent<any>) => void;
        "onLogin"?: (event: UnlockPanelCustomEvent<{ provider: ProviderTypeEnum; anchor?: HTMLElement }>) => void;
    }
    interface WalletConnect {
        "data"?: IWalletConnectPanelData;
    }
    interface WalletConnectBody {
        "description"?: string;
        "qrCodeSvg"?: string;
    }
    interface WalletConnectPanel {
        "data"?: IWalletConnectPanelData;
    }
    interface IntrinsicElements {
        "balance-component": BalanceComponent;
        "copy-button": CopyButton;
        "custom-toast": CustomToast;
        "explorer-link": ExplorerLink;
        "fa-icon": FaIcon;
        "fungible-component": FungibleComponent;
        "generic-toast": GenericToast;
        "ledger-account-screen": LedgerAccountScreen;
        "ledger-confirm-screen": LedgerConfirmScreen;
        "ledger-connect": LedgerConnect;
        "ledger-connect-panel": LedgerConnectPanel;
        "ledger-connect-screen": LedgerConnectScreen;
        "mvx-format-amount": MvxFormatAmount;
        "mvx-generic-modal": MvxGenericModal;
        "mvx-generic-spinner": MvxGenericSpinner;
        "mvx-transaction-account": MvxTransactionAccount;
        "mvx-transaction-account-name": MvxTransactionAccountName;
        "mvx-transaction-age": MvxTransactionAge;
        "mvx-transaction-direction-badge": MvxTransactionDirectionBadge;
        "mvx-transaction-hash": MvxTransactionHash;
        "mvx-transaction-icon": MvxTransactionIcon;
        "mvx-transaction-method": MvxTransactionMethod;
        "mvx-transaction-shards": MvxTransactionShards;
        "mvx-transaction-value": MvxTransactionValue;
        "mvx-transactions-table": MvxTransactionsTable;
        "mvx-unlock-button": MvxUnlockButton;
        "notifications-feed": NotificationsFeed;
        "pending-transactions-panel": PendingTransactionsPanel;
        "provider-button": ProviderButton;
        "side-panel": SidePanel;
        "sign-transaction-component": SignTransactionComponent;
        "sign-transactions-panel": SignTransactionsPanel;
        "simple-toast": SimpleToast;
        "toast-list": ToastList;
        "token-component": TokenComponent;
        "transaction-fee-component": TransactionFeeComponent;
        "transaction-list-item": TransactionListItem;
        "transaction-toast": TransactionToast;
        "transaction-toast-content": TransactionToastContent;
        "transaction-toast-details": TransactionToastDetails;
        "transaction-toast-details-body": TransactionToastDetailsBody;
        "transaction-toast-progress": TransactionToastProgress;
        "trim-text": TrimText;
        "unlock-header": UnlockHeader;
        "unlock-panel": UnlockPanel;
        "wallet-connect": WalletConnect;
        "wallet-connect-body": WalletConnectBody;
        "wallet-connect-panel": WalletConnectPanel;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "balance-component": LocalJSX.BalanceComponent & JSXBase.HTMLAttributes<HTMLBalanceComponentElement>;
            "copy-button": LocalJSX.CopyButton & JSXBase.HTMLAttributes<HTMLCopyButtonElement>;
            "custom-toast": LocalJSX.CustomToast & JSXBase.HTMLAttributes<HTMLCustomToastElement>;
            "explorer-link": LocalJSX.ExplorerLink & JSXBase.HTMLAttributes<HTMLExplorerLinkElement>;
            "fa-icon": LocalJSX.FaIcon & JSXBase.HTMLAttributes<HTMLFaIconElement>;
            "fungible-component": LocalJSX.FungibleComponent & JSXBase.HTMLAttributes<HTMLFungibleComponentElement>;
            "generic-toast": LocalJSX.GenericToast & JSXBase.HTMLAttributes<HTMLGenericToastElement>;
            "ledger-account-screen": LocalJSX.LedgerAccountScreen & JSXBase.HTMLAttributes<HTMLLedgerAccountScreenElement>;
            "ledger-confirm-screen": LocalJSX.LedgerConfirmScreen & JSXBase.HTMLAttributes<HTMLLedgerConfirmScreenElement>;
            "ledger-connect": LocalJSX.LedgerConnect & JSXBase.HTMLAttributes<HTMLLedgerConnectElement>;
            "ledger-connect-panel": LocalJSX.LedgerConnectPanel & JSXBase.HTMLAttributes<HTMLLedgerConnectPanelElement>;
            "ledger-connect-screen": LocalJSX.LedgerConnectScreen & JSXBase.HTMLAttributes<HTMLLedgerConnectScreenElement>;
            "mvx-format-amount": LocalJSX.MvxFormatAmount & JSXBase.HTMLAttributes<HTMLMvxFormatAmountElement>;
            "mvx-generic-modal": LocalJSX.MvxGenericModal & JSXBase.HTMLAttributes<HTMLMvxGenericModalElement>;
            "mvx-generic-spinner": LocalJSX.MvxGenericSpinner & JSXBase.HTMLAttributes<HTMLMvxGenericSpinnerElement>;
            "mvx-transaction-account": LocalJSX.MvxTransactionAccount & JSXBase.HTMLAttributes<HTMLMvxTransactionAccountElement>;
            "mvx-transaction-account-name": LocalJSX.MvxTransactionAccountName & JSXBase.HTMLAttributes<HTMLMvxTransactionAccountNameElement>;
            "mvx-transaction-age": LocalJSX.MvxTransactionAge & JSXBase.HTMLAttributes<HTMLMvxTransactionAgeElement>;
            "mvx-transaction-direction-badge": LocalJSX.MvxTransactionDirectionBadge & JSXBase.HTMLAttributes<HTMLMvxTransactionDirectionBadgeElement>;
            "mvx-transaction-hash": LocalJSX.MvxTransactionHash & JSXBase.HTMLAttributes<HTMLMvxTransactionHashElement>;
            "mvx-transaction-icon": LocalJSX.MvxTransactionIcon & JSXBase.HTMLAttributes<HTMLMvxTransactionIconElement>;
            "mvx-transaction-method": LocalJSX.MvxTransactionMethod & JSXBase.HTMLAttributes<HTMLMvxTransactionMethodElement>;
            "mvx-transaction-shards": LocalJSX.MvxTransactionShards & JSXBase.HTMLAttributes<HTMLMvxTransactionShardsElement>;
            "mvx-transaction-value": LocalJSX.MvxTransactionValue & JSXBase.HTMLAttributes<HTMLMvxTransactionValueElement>;
            "mvx-transactions-table": LocalJSX.MvxTransactionsTable & JSXBase.HTMLAttributes<HTMLMvxTransactionsTableElement>;
            "mvx-unlock-button": LocalJSX.MvxUnlockButton & JSXBase.HTMLAttributes<HTMLMvxUnlockButtonElement>;
            "notifications-feed": LocalJSX.NotificationsFeed & JSXBase.HTMLAttributes<HTMLNotificationsFeedElement>;
            "pending-transactions-panel": LocalJSX.PendingTransactionsPanel & JSXBase.HTMLAttributes<HTMLPendingTransactionsPanelElement>;
            "provider-button": LocalJSX.ProviderButton & JSXBase.HTMLAttributes<HTMLProviderButtonElement>;
            "side-panel": LocalJSX.SidePanel & JSXBase.HTMLAttributes<HTMLSidePanelElement>;
            "sign-transaction-component": LocalJSX.SignTransactionComponent & JSXBase.HTMLAttributes<HTMLSignTransactionComponentElement>;
            "sign-transactions-panel": LocalJSX.SignTransactionsPanel & JSXBase.HTMLAttributes<HTMLSignTransactionsPanelElement>;
            "simple-toast": LocalJSX.SimpleToast & JSXBase.HTMLAttributes<HTMLSimpleToastElement>;
            "toast-list": LocalJSX.ToastList & JSXBase.HTMLAttributes<HTMLToastListElement>;
            "token-component": LocalJSX.TokenComponent & JSXBase.HTMLAttributes<HTMLTokenComponentElement>;
            "transaction-fee-component": LocalJSX.TransactionFeeComponent & JSXBase.HTMLAttributes<HTMLTransactionFeeComponentElement>;
            "transaction-list-item": LocalJSX.TransactionListItem & JSXBase.HTMLAttributes<HTMLTransactionListItemElement>;
            "transaction-toast": LocalJSX.TransactionToast & JSXBase.HTMLAttributes<HTMLTransactionToastElement>;
            "transaction-toast-content": LocalJSX.TransactionToastContent & JSXBase.HTMLAttributes<HTMLTransactionToastContentElement>;
            "transaction-toast-details": LocalJSX.TransactionToastDetails & JSXBase.HTMLAttributes<HTMLTransactionToastDetailsElement>;
            "transaction-toast-details-body": LocalJSX.TransactionToastDetailsBody & JSXBase.HTMLAttributes<HTMLTransactionToastDetailsBodyElement>;
            "transaction-toast-progress": LocalJSX.TransactionToastProgress & JSXBase.HTMLAttributes<HTMLTransactionToastProgressElement>;
            "trim-text": LocalJSX.TrimText & JSXBase.HTMLAttributes<HTMLTrimTextElement>;
            "unlock-header": LocalJSX.UnlockHeader & JSXBase.HTMLAttributes<HTMLUnlockHeaderElement>;
            "unlock-panel": LocalJSX.UnlockPanel & JSXBase.HTMLAttributes<HTMLUnlockPanelElement>;
            "wallet-connect": LocalJSX.WalletConnect & JSXBase.HTMLAttributes<HTMLWalletConnectElement>;
            "wallet-connect-body": LocalJSX.WalletConnectBody & JSXBase.HTMLAttributes<HTMLWalletConnectBodyElement>;
            "wallet-connect-panel": LocalJSX.WalletConnectPanel & JSXBase.HTMLAttributes<HTMLWalletConnectPanelElement>;
        }
    }
}
