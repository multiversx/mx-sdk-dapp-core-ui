/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { IconDefinition } from "@fortawesome/free-solid-svg-icons";
import { CustomToastType, IComponentToast, ISimpleToast } from "./components/functional/toasts-list/components/transaction-toast/transaction-toast.type";
import { IGenericModalProps } from "./components/common/generic-modal/generic-modal.types";
import { IAccountScreenData, IConfirmScreenData, IConnectScreenData, ILedgerConnectPanelData } from "./components/functional/ledger-connect-components/ledger-connect.types";
import { IEventBus } from "./utils/EventBus";
import { IPendingTransactionsPanelData } from "./components/functional/pending-transactions-panel/pending-transactions-panel.types";
import { ProviderTypeEnum } from "./types/provider.types";
import { LocalJSX as JSX, VNode } from "@stencil/core";
import { ISignTransactionsPanelData } from "./components/functional/sign-transactions-panel/sign-transactions-panel.types";
import { CustomToastType as CustomToastType1, IToastDataState, ITransactionProgressState, ITransactionToast } from "./components/functional/toasts-list/components/transaction-toast/transaction-toast.type";
import { ITransactionAccount, ITransactionIconInfo, ITransactionsTableRow } from "./components/controlled/transactions-table/transactions-table.type";
import { ITransactionListItem } from "./components/visual/transaction-list-item/transaction-list-item.types";
import { ITransactionListItem as ITransactionListItem1 } from "./components/visual/transaction-list-item/transaction-list-item.types";
import { ITransactionValue } from "./components/controlled/transactions-table/transactions-table.type";
import { IWalletConnectPanelData } from "./components/functional/wallet-connect-components/wallet-connect-panel.types";
export { IconDefinition } from "@fortawesome/free-solid-svg-icons";
export { CustomToastType, IComponentToast, ISimpleToast } from "./components/functional/toasts-list/components/transaction-toast/transaction-toast.type";
export { IGenericModalProps } from "./components/common/generic-modal/generic-modal.types";
export { IAccountScreenData, IConfirmScreenData, IConnectScreenData, ILedgerConnectPanelData } from "./components/functional/ledger-connect-components/ledger-connect.types";
export { IEventBus } from "./utils/EventBus";
export { IPendingTransactionsPanelData } from "./components/functional/pending-transactions-panel/pending-transactions-panel.types";
export { ProviderTypeEnum } from "./types/provider.types";
export { LocalJSX as JSX, VNode } from "@stencil/core";
export { ISignTransactionsPanelData } from "./components/functional/sign-transactions-panel/sign-transactions-panel.types";
export { CustomToastType as CustomToastType1, IToastDataState, ITransactionProgressState, ITransactionToast } from "./components/functional/toasts-list/components/transaction-toast/transaction-toast.type";
export { ITransactionAccount, ITransactionIconInfo, ITransactionsTableRow } from "./components/controlled/transactions-table/transactions-table.type";
export { ITransactionListItem } from "./components/visual/transaction-list-item/transaction-list-item.types";
export { ITransactionListItem as ITransactionListItem1 } from "./components/visual/transaction-list-item/transaction-list-item.types";
export { ITransactionValue } from "./components/controlled/transactions-table/transactions-table.type";
export { IWalletConnectPanelData } from "./components/functional/wallet-connect-components/wallet-connect-panel.types";
export namespace Components {
    interface MvxArrowUpRightIcon {
    }
    interface MvxBackArrowIcon {
    }
    interface MvxBalanceComponent {
        "amount": string;
        "header"?: string;
        "ticker": string;
        "usdValue"?: string;
    }
    interface MvxCloseIcon {
    }
    interface MvxCopyButton {
        "class"?: string;
        "copyIcon"?: IconDefinition;
        "iconClass"?: string;
        "successIcon"?: IconDefinition;
        "text": string;
    }
    interface MvxCustomToast {
        "toast": IComponentToast;
    }
    interface MvxDefaultTransactionIconLarge {
    }
    interface MvxDefaultTransactionIconSmall {
    }
    interface MvxExplorerLink {
        "class"?: string;
        "dataTestId"?: string;
        "icon"?: IconDefinition;
        "iconClass"?: string;
        "link": string;
        "text"?: string;
    }
    interface MvxExtensionProviderIcon {
    }
    interface MvxFaIcon {
        "class"?: string;
        "description"?: string;
        "icon": IconDefinition | string;
    }
    interface MvxFormatAmount {
        "class"?: string;
        "dataTestId"?: string;
        "isValid": boolean;
        "label"?: string;
        "labelClass"?: string;
        "showLabel"?: boolean;
        "valueDecimal": string;
        "valueInteger": string;
    }
    interface MvxFungibleComponent {
    }
    interface MvxGenericModal {
        "body": IGenericModalProps['body'];
        "modalSubtitle"?: IGenericModalProps['modalSubtitle'];
        "modalTitle": IGenericModalProps['modalTitle'];
    }
    interface MvxGenericSpinner {
    }
    interface MvxGenericToast {
        "toast": CustomToastType;
    }
    interface MvxLedgerAccountScreen {
        "accountScreenData": IAccountScreenData;
        "selectedIndex": number;
    }
    interface MvxLedgerConfirmScreen {
        "confirmScreenData": IConfirmScreenData;
    }
    interface MvxLedgerConnect {
        "data": ILedgerConnectPanelData;
        "getEventBus": () => Promise<IEventBus>;
    }
    interface MvxLedgerConnectPanel {
        "data": ILedgerConnectPanelData;
        "getEventBus": () => Promise<IEventBus>;
    }
    interface MvxLedgerConnectScreen {
        "connectScreenData": IConnectScreenData;
    }
    interface MvxLedgerProviderIcon {
    }
    interface MvxMetamaskProviderIcon {
    }
    interface MvxMultiversxLogoIcon {
    }
    interface MvxNotificationsFeed {
        "getEventBus": () => Promise<IEventBus>;
    }
    interface MvxPasskeyProviderIcon {
    }
    interface MvxPendingTransactionsPanel {
        "data": IPendingTransactionsPanelData;
        "getEventBus": () => Promise<IEventBus>;
    }
    interface MvxProviderButton {
        "class"?: string;
        "type": ProviderTypeEnum;
    }
    interface MvxSidePanel {
        "isOpen": boolean;
        "panelClassName"?: string;
        "panelTitle": string;
        "withBackButton"?: boolean;
    }
    interface MvxSignTransactionComponent {
        "header": VNode;
    }
    interface MvxSignTransactionsPanel {
        "data": ISignTransactionsPanelData;
        "getEventBus": () => Promise<IEventBus>;
    }
    interface MvxSimpleToast {
        "toast": ISimpleToast;
    }
    interface MvxToastList {
        "customToasts": CustomToastType1[];
        "getEventBus": () => Promise<IEventBus>;
        "transactionToasts": ITransactionToast[];
    }
    interface MvxTokenComponent {
    }
    interface MvxTransactionAccount {
        "account": ITransactionAccount;
        "class"?: string;
        "dataTestId"?: string;
        "scope": 'receiver' | 'sender';
        "showLockedAccounts": boolean;
    }
    interface MvxTransactionAccountName {
        "address": string;
        "class"?: string;
        "dataTestId"?: string;
        "description": string;
        "name"?: string;
    }
    interface MvxTransactionAge {
        "age": string;
        "class"?: string;
        "tooltip"?: string;
    }
    interface MvxTransactionDirectionBadge {
        "class"?: string;
        "direction": string;
    }
    interface MvxTransactionFeeComponent {
    }
    interface MvxTransactionHash {
        "class"?: string;
        "transaction": ITransactionsTableRow;
    }
    interface MvxTransactionIcon {
        "class"?: string;
        "iconInfo": ITransactionIconInfo;
    }
    interface MvxTransactionListItem {
        "transaction": ITransactionListItem;
    }
    interface MvxTransactionMethod {
        "actionDescription": string;
        "class"?: string;
        "method": string;
    }
    interface MvxTransactionShards {
        "class"?: string;
        "transaction": ITransactionsTableRow;
    }
    interface MvxTransactionToast {
        "fullWidth"?: boolean;
        "processedTransactionsStatus": string | JSX.Element;
        "toastDataState": IToastDataState;
        "toastId": string;
        "transactionProgressState"?: ITransactionProgressState;
        "transactions": ITransactionListItem[];
        "wrapperClass": string;
    }
    interface MvxTransactionToastContent {
        "fullWidth"?: boolean;
        "processedTransactionsStatus"?: string | JSX.Element;
        "toastDataState": IToastDataState;
        "transactions": ITransactionListItem[];
    }
    interface MvxTransactionToastDetails {
        "maxShownTransactions": number;
        "processedTransactionsStatus"?: string | JSX.Element;
        "transactionClass": string;
        "transactions"?: ITransactionListItem[];
    }
    interface MvxTransactionToastDetailsBody {
        "hash": string;
        "index": string;
        "link": string;
        "status"?: string;
        "transactionClass"?: string;
    }
    interface MvxTransactionToastProgress {
        "endTime"?: number;
        "startTime"?: number;
    }
    interface MvxTransactionValue {
        "class"?: string;
        "value": ITransactionValue;
    }
    interface MvxTransactionsTable {
        "class"?: string;
        "transactions": ITransactionsTableRow[];
    }
    interface MvxTrimText {
        "class"?: string;
        "dataTestId"?: string;
        "text": string;
    }
    interface MvxUnlockButton {
        "class"?: string;
        "icon": HTMLElement;
        "label": string;
        "type"?: ProviderTypeEnum;
    }
    interface MvxUnlockPanel {
        "allowedProviders"?: ProviderTypeEnum[];
        "isOpen": boolean;
    }
    interface MvxWalletConnect {
        "data": IWalletConnectPanelData;
        "getEventBus": () => Promise<IEventBus>;
    }
    interface MvxWalletConnectBody {
        "qrCodeSvg": string;
    }
    interface MvxWalletConnectPanel {
        "data": IWalletConnectPanelData;
        "getEventBus": () => Promise<IEventBus>;
    }
    interface MvxWalletProviderIcon {
    }
    interface MvxXaliasProviderIcon {
    }
    interface MvxXportalDownloadQrIcon {
    }
    interface MvxXportalQrCodePreloader {
        "class"?: string;
        "dataTestId"?: string;
    }
}
export interface MvxCustomToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMvxCustomToastElement;
}
export interface MvxGenericModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMvxGenericModalElement;
}
export interface MvxGenericToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMvxGenericToastElement;
}
export interface MvxLedgerAccountScreenCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMvxLedgerAccountScreenElement;
}
export interface MvxLedgerConnectScreenCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMvxLedgerConnectScreenElement;
}
export interface MvxSidePanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMvxSidePanelElement;
}
export interface MvxSimpleToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMvxSimpleToastElement;
}
export interface MvxTransactionToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMvxTransactionToastElement;
}
export interface MvxTransactionToastContentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMvxTransactionToastContentElement;
}
export interface MvxUnlockPanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMvxUnlockPanelElement;
}
declare global {
    interface HTMLMvxArrowUpRightIconElement extends Components.MvxArrowUpRightIcon, HTMLStencilElement {
    }
    var HTMLMvxArrowUpRightIconElement: {
        prototype: HTMLMvxArrowUpRightIconElement;
        new (): HTMLMvxArrowUpRightIconElement;
    };
    interface HTMLMvxBackArrowIconElement extends Components.MvxBackArrowIcon, HTMLStencilElement {
    }
    var HTMLMvxBackArrowIconElement: {
        prototype: HTMLMvxBackArrowIconElement;
        new (): HTMLMvxBackArrowIconElement;
    };
    interface HTMLMvxBalanceComponentElement extends Components.MvxBalanceComponent, HTMLStencilElement {
    }
    var HTMLMvxBalanceComponentElement: {
        prototype: HTMLMvxBalanceComponentElement;
        new (): HTMLMvxBalanceComponentElement;
    };
    interface HTMLMvxCloseIconElement extends Components.MvxCloseIcon, HTMLStencilElement {
    }
    var HTMLMvxCloseIconElement: {
        prototype: HTMLMvxCloseIconElement;
        new (): HTMLMvxCloseIconElement;
    };
    interface HTMLMvxCopyButtonElement extends Components.MvxCopyButton, HTMLStencilElement {
    }
    var HTMLMvxCopyButtonElement: {
        prototype: HTMLMvxCopyButtonElement;
        new (): HTMLMvxCopyButtonElement;
    };
    interface HTMLMvxCustomToastElementEventMap {
        "deleteToast": string;
    }
    interface HTMLMvxCustomToastElement extends Components.MvxCustomToast, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMvxCustomToastElementEventMap>(type: K, listener: (this: HTMLMvxCustomToastElement, ev: MvxCustomToastCustomEvent<HTMLMvxCustomToastElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMvxCustomToastElementEventMap>(type: K, listener: (this: HTMLMvxCustomToastElement, ev: MvxCustomToastCustomEvent<HTMLMvxCustomToastElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMvxCustomToastElement: {
        prototype: HTMLMvxCustomToastElement;
        new (): HTMLMvxCustomToastElement;
    };
    interface HTMLMvxDefaultTransactionIconLargeElement extends Components.MvxDefaultTransactionIconLarge, HTMLStencilElement {
    }
    var HTMLMvxDefaultTransactionIconLargeElement: {
        prototype: HTMLMvxDefaultTransactionIconLargeElement;
        new (): HTMLMvxDefaultTransactionIconLargeElement;
    };
    interface HTMLMvxDefaultTransactionIconSmallElement extends Components.MvxDefaultTransactionIconSmall, HTMLStencilElement {
    }
    var HTMLMvxDefaultTransactionIconSmallElement: {
        prototype: HTMLMvxDefaultTransactionIconSmallElement;
        new (): HTMLMvxDefaultTransactionIconSmallElement;
    };
    interface HTMLMvxExplorerLinkElement extends Components.MvxExplorerLink, HTMLStencilElement {
    }
    var HTMLMvxExplorerLinkElement: {
        prototype: HTMLMvxExplorerLinkElement;
        new (): HTMLMvxExplorerLinkElement;
    };
    interface HTMLMvxExtensionProviderIconElement extends Components.MvxExtensionProviderIcon, HTMLStencilElement {
    }
    var HTMLMvxExtensionProviderIconElement: {
        prototype: HTMLMvxExtensionProviderIconElement;
        new (): HTMLMvxExtensionProviderIconElement;
    };
    interface HTMLMvxFaIconElement extends Components.MvxFaIcon, HTMLStencilElement {
    }
    var HTMLMvxFaIconElement: {
        prototype: HTMLMvxFaIconElement;
        new (): HTMLMvxFaIconElement;
    };
    interface HTMLMvxFormatAmountElement extends Components.MvxFormatAmount, HTMLStencilElement {
    }
    var HTMLMvxFormatAmountElement: {
        prototype: HTMLMvxFormatAmountElement;
        new (): HTMLMvxFormatAmountElement;
    };
    interface HTMLMvxFungibleComponentElement extends Components.MvxFungibleComponent, HTMLStencilElement {
    }
    var HTMLMvxFungibleComponentElement: {
        prototype: HTMLMvxFungibleComponentElement;
        new (): HTMLMvxFungibleComponentElement;
    };
    interface HTMLMvxGenericModalElementEventMap {
        "close": any;
    }
    interface HTMLMvxGenericModalElement extends Components.MvxGenericModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMvxGenericModalElementEventMap>(type: K, listener: (this: HTMLMvxGenericModalElement, ev: MvxGenericModalCustomEvent<HTMLMvxGenericModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMvxGenericModalElementEventMap>(type: K, listener: (this: HTMLMvxGenericModalElement, ev: MvxGenericModalCustomEvent<HTMLMvxGenericModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMvxGenericModalElement: {
        prototype: HTMLMvxGenericModalElement;
        new (): HTMLMvxGenericModalElement;
    };
    interface HTMLMvxGenericSpinnerElement extends Components.MvxGenericSpinner, HTMLStencilElement {
    }
    var HTMLMvxGenericSpinnerElement: {
        prototype: HTMLMvxGenericSpinnerElement;
        new (): HTMLMvxGenericSpinnerElement;
    };
    interface HTMLMvxGenericToastElementEventMap {
        "deleteToast": string;
    }
    interface HTMLMvxGenericToastElement extends Components.MvxGenericToast, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMvxGenericToastElementEventMap>(type: K, listener: (this: HTMLMvxGenericToastElement, ev: MvxGenericToastCustomEvent<HTMLMvxGenericToastElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMvxGenericToastElementEventMap>(type: K, listener: (this: HTMLMvxGenericToastElement, ev: MvxGenericToastCustomEvent<HTMLMvxGenericToastElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMvxGenericToastElement: {
        prototype: HTMLMvxGenericToastElement;
        new (): HTMLMvxGenericToastElement;
    };
    interface HTMLMvxLedgerAccountScreenElementEventMap {
        "selectAccount": any;
        "nextPage": any;
        "prevPage": any;
        "accessWallet": any;
    }
    interface HTMLMvxLedgerAccountScreenElement extends Components.MvxLedgerAccountScreen, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMvxLedgerAccountScreenElementEventMap>(type: K, listener: (this: HTMLMvxLedgerAccountScreenElement, ev: MvxLedgerAccountScreenCustomEvent<HTMLMvxLedgerAccountScreenElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMvxLedgerAccountScreenElementEventMap>(type: K, listener: (this: HTMLMvxLedgerAccountScreenElement, ev: MvxLedgerAccountScreenCustomEvent<HTMLMvxLedgerAccountScreenElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMvxLedgerAccountScreenElement: {
        prototype: HTMLMvxLedgerAccountScreenElement;
        new (): HTMLMvxLedgerAccountScreenElement;
    };
    interface HTMLMvxLedgerConfirmScreenElement extends Components.MvxLedgerConfirmScreen, HTMLStencilElement {
    }
    var HTMLMvxLedgerConfirmScreenElement: {
        prototype: HTMLMvxLedgerConfirmScreenElement;
        new (): HTMLMvxLedgerConfirmScreenElement;
    };
    interface HTMLMvxLedgerConnectElement extends Components.MvxLedgerConnect, HTMLStencilElement {
    }
    var HTMLMvxLedgerConnectElement: {
        prototype: HTMLMvxLedgerConnectElement;
        new (): HTMLMvxLedgerConnectElement;
    };
    interface HTMLMvxLedgerConnectPanelElement extends Components.MvxLedgerConnectPanel, HTMLStencilElement {
    }
    var HTMLMvxLedgerConnectPanelElement: {
        prototype: HTMLMvxLedgerConnectPanelElement;
        new (): HTMLMvxLedgerConnectPanelElement;
    };
    interface HTMLMvxLedgerConnectScreenElementEventMap {
        "connect": any;
    }
    interface HTMLMvxLedgerConnectScreenElement extends Components.MvxLedgerConnectScreen, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMvxLedgerConnectScreenElementEventMap>(type: K, listener: (this: HTMLMvxLedgerConnectScreenElement, ev: MvxLedgerConnectScreenCustomEvent<HTMLMvxLedgerConnectScreenElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMvxLedgerConnectScreenElementEventMap>(type: K, listener: (this: HTMLMvxLedgerConnectScreenElement, ev: MvxLedgerConnectScreenCustomEvent<HTMLMvxLedgerConnectScreenElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMvxLedgerConnectScreenElement: {
        prototype: HTMLMvxLedgerConnectScreenElement;
        new (): HTMLMvxLedgerConnectScreenElement;
    };
    interface HTMLMvxLedgerProviderIconElement extends Components.MvxLedgerProviderIcon, HTMLStencilElement {
    }
    var HTMLMvxLedgerProviderIconElement: {
        prototype: HTMLMvxLedgerProviderIconElement;
        new (): HTMLMvxLedgerProviderIconElement;
    };
    interface HTMLMvxMetamaskProviderIconElement extends Components.MvxMetamaskProviderIcon, HTMLStencilElement {
    }
    var HTMLMvxMetamaskProviderIconElement: {
        prototype: HTMLMvxMetamaskProviderIconElement;
        new (): HTMLMvxMetamaskProviderIconElement;
    };
    interface HTMLMvxMultiversxLogoIconElement extends Components.MvxMultiversxLogoIcon, HTMLStencilElement {
    }
    var HTMLMvxMultiversxLogoIconElement: {
        prototype: HTMLMvxMultiversxLogoIconElement;
        new (): HTMLMvxMultiversxLogoIconElement;
    };
    interface HTMLMvxNotificationsFeedElement extends Components.MvxNotificationsFeed, HTMLStencilElement {
    }
    var HTMLMvxNotificationsFeedElement: {
        prototype: HTMLMvxNotificationsFeedElement;
        new (): HTMLMvxNotificationsFeedElement;
    };
    interface HTMLMvxPasskeyProviderIconElement extends Components.MvxPasskeyProviderIcon, HTMLStencilElement {
    }
    var HTMLMvxPasskeyProviderIconElement: {
        prototype: HTMLMvxPasskeyProviderIconElement;
        new (): HTMLMvxPasskeyProviderIconElement;
    };
    interface HTMLMvxPendingTransactionsPanelElement extends Components.MvxPendingTransactionsPanel, HTMLStencilElement {
    }
    var HTMLMvxPendingTransactionsPanelElement: {
        prototype: HTMLMvxPendingTransactionsPanelElement;
        new (): HTMLMvxPendingTransactionsPanelElement;
    };
    interface HTMLMvxProviderButtonElement extends Components.MvxProviderButton, HTMLStencilElement {
    }
    var HTMLMvxProviderButtonElement: {
        prototype: HTMLMvxProviderButtonElement;
        new (): HTMLMvxProviderButtonElement;
    };
    interface HTMLMvxSidePanelElementEventMap {
        "close": any;
        "back": any;
    }
    interface HTMLMvxSidePanelElement extends Components.MvxSidePanel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMvxSidePanelElementEventMap>(type: K, listener: (this: HTMLMvxSidePanelElement, ev: MvxSidePanelCustomEvent<HTMLMvxSidePanelElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMvxSidePanelElementEventMap>(type: K, listener: (this: HTMLMvxSidePanelElement, ev: MvxSidePanelCustomEvent<HTMLMvxSidePanelElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMvxSidePanelElement: {
        prototype: HTMLMvxSidePanelElement;
        new (): HTMLMvxSidePanelElement;
    };
    interface HTMLMvxSignTransactionComponentElement extends Components.MvxSignTransactionComponent, HTMLStencilElement {
    }
    var HTMLMvxSignTransactionComponentElement: {
        prototype: HTMLMvxSignTransactionComponentElement;
        new (): HTMLMvxSignTransactionComponentElement;
    };
    interface HTMLMvxSignTransactionsPanelElement extends Components.MvxSignTransactionsPanel, HTMLStencilElement {
    }
    var HTMLMvxSignTransactionsPanelElement: {
        prototype: HTMLMvxSignTransactionsPanelElement;
        new (): HTMLMvxSignTransactionsPanelElement;
    };
    interface HTMLMvxSimpleToastElementEventMap {
        "deleteToast": void;
    }
    interface HTMLMvxSimpleToastElement extends Components.MvxSimpleToast, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMvxSimpleToastElementEventMap>(type: K, listener: (this: HTMLMvxSimpleToastElement, ev: MvxSimpleToastCustomEvent<HTMLMvxSimpleToastElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMvxSimpleToastElementEventMap>(type: K, listener: (this: HTMLMvxSimpleToastElement, ev: MvxSimpleToastCustomEvent<HTMLMvxSimpleToastElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMvxSimpleToastElement: {
        prototype: HTMLMvxSimpleToastElement;
        new (): HTMLMvxSimpleToastElement;
    };
    interface HTMLMvxToastListElement extends Components.MvxToastList, HTMLStencilElement {
    }
    var HTMLMvxToastListElement: {
        prototype: HTMLMvxToastListElement;
        new (): HTMLMvxToastListElement;
    };
    interface HTMLMvxTokenComponentElement extends Components.MvxTokenComponent, HTMLStencilElement {
    }
    var HTMLMvxTokenComponentElement: {
        prototype: HTMLMvxTokenComponentElement;
        new (): HTMLMvxTokenComponentElement;
    };
    interface HTMLMvxTransactionAccountElement extends Components.MvxTransactionAccount, HTMLStencilElement {
    }
    var HTMLMvxTransactionAccountElement: {
        prototype: HTMLMvxTransactionAccountElement;
        new (): HTMLMvxTransactionAccountElement;
    };
    interface HTMLMvxTransactionAccountNameElement extends Components.MvxTransactionAccountName, HTMLStencilElement {
    }
    var HTMLMvxTransactionAccountNameElement: {
        prototype: HTMLMvxTransactionAccountNameElement;
        new (): HTMLMvxTransactionAccountNameElement;
    };
    interface HTMLMvxTransactionAgeElement extends Components.MvxTransactionAge, HTMLStencilElement {
    }
    var HTMLMvxTransactionAgeElement: {
        prototype: HTMLMvxTransactionAgeElement;
        new (): HTMLMvxTransactionAgeElement;
    };
    interface HTMLMvxTransactionDirectionBadgeElement extends Components.MvxTransactionDirectionBadge, HTMLStencilElement {
    }
    var HTMLMvxTransactionDirectionBadgeElement: {
        prototype: HTMLMvxTransactionDirectionBadgeElement;
        new (): HTMLMvxTransactionDirectionBadgeElement;
    };
    interface HTMLMvxTransactionFeeComponentElement extends Components.MvxTransactionFeeComponent, HTMLStencilElement {
    }
    var HTMLMvxTransactionFeeComponentElement: {
        prototype: HTMLMvxTransactionFeeComponentElement;
        new (): HTMLMvxTransactionFeeComponentElement;
    };
    interface HTMLMvxTransactionHashElement extends Components.MvxTransactionHash, HTMLStencilElement {
    }
    var HTMLMvxTransactionHashElement: {
        prototype: HTMLMvxTransactionHashElement;
        new (): HTMLMvxTransactionHashElement;
    };
    interface HTMLMvxTransactionIconElement extends Components.MvxTransactionIcon, HTMLStencilElement {
    }
    var HTMLMvxTransactionIconElement: {
        prototype: HTMLMvxTransactionIconElement;
        new (): HTMLMvxTransactionIconElement;
    };
    interface HTMLMvxTransactionListItemElement extends Components.MvxTransactionListItem, HTMLStencilElement {
    }
    var HTMLMvxTransactionListItemElement: {
        prototype: HTMLMvxTransactionListItemElement;
        new (): HTMLMvxTransactionListItemElement;
    };
    interface HTMLMvxTransactionMethodElement extends Components.MvxTransactionMethod, HTMLStencilElement {
    }
    var HTMLMvxTransactionMethodElement: {
        prototype: HTMLMvxTransactionMethodElement;
        new (): HTMLMvxTransactionMethodElement;
    };
    interface HTMLMvxTransactionShardsElement extends Components.MvxTransactionShards, HTMLStencilElement {
    }
    var HTMLMvxTransactionShardsElement: {
        prototype: HTMLMvxTransactionShardsElement;
        new (): HTMLMvxTransactionShardsElement;
    };
    interface HTMLMvxTransactionToastElementEventMap {
        "deleteToast": void;
    }
    interface HTMLMvxTransactionToastElement extends Components.MvxTransactionToast, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMvxTransactionToastElementEventMap>(type: K, listener: (this: HTMLMvxTransactionToastElement, ev: MvxTransactionToastCustomEvent<HTMLMvxTransactionToastElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMvxTransactionToastElementEventMap>(type: K, listener: (this: HTMLMvxTransactionToastElement, ev: MvxTransactionToastCustomEvent<HTMLMvxTransactionToastElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMvxTransactionToastElement: {
        prototype: HTMLMvxTransactionToastElement;
        new (): HTMLMvxTransactionToastElement;
    };
    interface HTMLMvxTransactionToastContentElementEventMap {
        "deleteToast": void;
    }
    interface HTMLMvxTransactionToastContentElement extends Components.MvxTransactionToastContent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMvxTransactionToastContentElementEventMap>(type: K, listener: (this: HTMLMvxTransactionToastContentElement, ev: MvxTransactionToastContentCustomEvent<HTMLMvxTransactionToastContentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMvxTransactionToastContentElementEventMap>(type: K, listener: (this: HTMLMvxTransactionToastContentElement, ev: MvxTransactionToastContentCustomEvent<HTMLMvxTransactionToastContentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMvxTransactionToastContentElement: {
        prototype: HTMLMvxTransactionToastContentElement;
        new (): HTMLMvxTransactionToastContentElement;
    };
    interface HTMLMvxTransactionToastDetailsElement extends Components.MvxTransactionToastDetails, HTMLStencilElement {
    }
    var HTMLMvxTransactionToastDetailsElement: {
        prototype: HTMLMvxTransactionToastDetailsElement;
        new (): HTMLMvxTransactionToastDetailsElement;
    };
    interface HTMLMvxTransactionToastDetailsBodyElement extends Components.MvxTransactionToastDetailsBody, HTMLStencilElement {
    }
    var HTMLMvxTransactionToastDetailsBodyElement: {
        prototype: HTMLMvxTransactionToastDetailsBodyElement;
        new (): HTMLMvxTransactionToastDetailsBodyElement;
    };
    interface HTMLMvxTransactionToastProgressElement extends Components.MvxTransactionToastProgress, HTMLStencilElement {
    }
    var HTMLMvxTransactionToastProgressElement: {
        prototype: HTMLMvxTransactionToastProgressElement;
        new (): HTMLMvxTransactionToastProgressElement;
    };
    interface HTMLMvxTransactionValueElement extends Components.MvxTransactionValue, HTMLStencilElement {
    }
    var HTMLMvxTransactionValueElement: {
        prototype: HTMLMvxTransactionValueElement;
        new (): HTMLMvxTransactionValueElement;
    };
    interface HTMLMvxTransactionsTableElement extends Components.MvxTransactionsTable, HTMLStencilElement {
    }
    var HTMLMvxTransactionsTableElement: {
        prototype: HTMLMvxTransactionsTableElement;
        new (): HTMLMvxTransactionsTableElement;
    };
    interface HTMLMvxTrimTextElement extends Components.MvxTrimText, HTMLStencilElement {
    }
    var HTMLMvxTrimTextElement: {
        prototype: HTMLMvxTrimTextElement;
        new (): HTMLMvxTrimTextElement;
    };
    interface HTMLMvxUnlockButtonElement extends Components.MvxUnlockButton, HTMLStencilElement {
    }
    var HTMLMvxUnlockButtonElement: {
        prototype: HTMLMvxUnlockButtonElement;
        new (): HTMLMvxUnlockButtonElement;
    };
    interface HTMLMvxUnlockPanelElementEventMap {
        "close": any;
        "login": { provider: ProviderTypeEnum; anchor?: HTMLElement };
    }
    interface HTMLMvxUnlockPanelElement extends Components.MvxUnlockPanel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMvxUnlockPanelElementEventMap>(type: K, listener: (this: HTMLMvxUnlockPanelElement, ev: MvxUnlockPanelCustomEvent<HTMLMvxUnlockPanelElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMvxUnlockPanelElementEventMap>(type: K, listener: (this: HTMLMvxUnlockPanelElement, ev: MvxUnlockPanelCustomEvent<HTMLMvxUnlockPanelElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMvxUnlockPanelElement: {
        prototype: HTMLMvxUnlockPanelElement;
        new (): HTMLMvxUnlockPanelElement;
    };
    interface HTMLMvxWalletConnectElement extends Components.MvxWalletConnect, HTMLStencilElement {
    }
    var HTMLMvxWalletConnectElement: {
        prototype: HTMLMvxWalletConnectElement;
        new (): HTMLMvxWalletConnectElement;
    };
    interface HTMLMvxWalletConnectBodyElement extends Components.MvxWalletConnectBody, HTMLStencilElement {
    }
    var HTMLMvxWalletConnectBodyElement: {
        prototype: HTMLMvxWalletConnectBodyElement;
        new (): HTMLMvxWalletConnectBodyElement;
    };
    interface HTMLMvxWalletConnectPanelElement extends Components.MvxWalletConnectPanel, HTMLStencilElement {
    }
    var HTMLMvxWalletConnectPanelElement: {
        prototype: HTMLMvxWalletConnectPanelElement;
        new (): HTMLMvxWalletConnectPanelElement;
    };
    interface HTMLMvxWalletProviderIconElement extends Components.MvxWalletProviderIcon, HTMLStencilElement {
    }
    var HTMLMvxWalletProviderIconElement: {
        prototype: HTMLMvxWalletProviderIconElement;
        new (): HTMLMvxWalletProviderIconElement;
    };
    interface HTMLMvxXaliasProviderIconElement extends Components.MvxXaliasProviderIcon, HTMLStencilElement {
    }
    var HTMLMvxXaliasProviderIconElement: {
        prototype: HTMLMvxXaliasProviderIconElement;
        new (): HTMLMvxXaliasProviderIconElement;
    };
    interface HTMLMvxXportalDownloadQrIconElement extends Components.MvxXportalDownloadQrIcon, HTMLStencilElement {
    }
    var HTMLMvxXportalDownloadQrIconElement: {
        prototype: HTMLMvxXportalDownloadQrIconElement;
        new (): HTMLMvxXportalDownloadQrIconElement;
    };
    interface HTMLMvxXportalQrCodePreloaderElement extends Components.MvxXportalQrCodePreloader, HTMLStencilElement {
    }
    var HTMLMvxXportalQrCodePreloaderElement: {
        prototype: HTMLMvxXportalQrCodePreloaderElement;
        new (): HTMLMvxXportalQrCodePreloaderElement;
    };
    interface HTMLElementTagNameMap {
        "mvx-arrow-up-right-icon": HTMLMvxArrowUpRightIconElement;
        "mvx-back-arrow-icon": HTMLMvxBackArrowIconElement;
        "mvx-balance-component": HTMLMvxBalanceComponentElement;
        "mvx-close-icon": HTMLMvxCloseIconElement;
        "mvx-copy-button": HTMLMvxCopyButtonElement;
        "mvx-custom-toast": HTMLMvxCustomToastElement;
        "mvx-default-transaction-icon-large": HTMLMvxDefaultTransactionIconLargeElement;
        "mvx-default-transaction-icon-small": HTMLMvxDefaultTransactionIconSmallElement;
        "mvx-explorer-link": HTMLMvxExplorerLinkElement;
        "mvx-extension-provider-icon": HTMLMvxExtensionProviderIconElement;
        "mvx-fa-icon": HTMLMvxFaIconElement;
        "mvx-format-amount": HTMLMvxFormatAmountElement;
        "mvx-fungible-component": HTMLMvxFungibleComponentElement;
        "mvx-generic-modal": HTMLMvxGenericModalElement;
        "mvx-generic-spinner": HTMLMvxGenericSpinnerElement;
        "mvx-generic-toast": HTMLMvxGenericToastElement;
        "mvx-ledger-account-screen": HTMLMvxLedgerAccountScreenElement;
        "mvx-ledger-confirm-screen": HTMLMvxLedgerConfirmScreenElement;
        "mvx-ledger-connect": HTMLMvxLedgerConnectElement;
        "mvx-ledger-connect-panel": HTMLMvxLedgerConnectPanelElement;
        "mvx-ledger-connect-screen": HTMLMvxLedgerConnectScreenElement;
        "mvx-ledger-provider-icon": HTMLMvxLedgerProviderIconElement;
        "mvx-metamask-provider-icon": HTMLMvxMetamaskProviderIconElement;
        "mvx-multiversx-logo-icon": HTMLMvxMultiversxLogoIconElement;
        "mvx-notifications-feed": HTMLMvxNotificationsFeedElement;
        "mvx-passkey-provider-icon": HTMLMvxPasskeyProviderIconElement;
        "mvx-pending-transactions-panel": HTMLMvxPendingTransactionsPanelElement;
        "mvx-provider-button": HTMLMvxProviderButtonElement;
        "mvx-side-panel": HTMLMvxSidePanelElement;
        "mvx-sign-transaction-component": HTMLMvxSignTransactionComponentElement;
        "mvx-sign-transactions-panel": HTMLMvxSignTransactionsPanelElement;
        "mvx-simple-toast": HTMLMvxSimpleToastElement;
        "mvx-toast-list": HTMLMvxToastListElement;
        "mvx-token-component": HTMLMvxTokenComponentElement;
        "mvx-transaction-account": HTMLMvxTransactionAccountElement;
        "mvx-transaction-account-name": HTMLMvxTransactionAccountNameElement;
        "mvx-transaction-age": HTMLMvxTransactionAgeElement;
        "mvx-transaction-direction-badge": HTMLMvxTransactionDirectionBadgeElement;
        "mvx-transaction-fee-component": HTMLMvxTransactionFeeComponentElement;
        "mvx-transaction-hash": HTMLMvxTransactionHashElement;
        "mvx-transaction-icon": HTMLMvxTransactionIconElement;
        "mvx-transaction-list-item": HTMLMvxTransactionListItemElement;
        "mvx-transaction-method": HTMLMvxTransactionMethodElement;
        "mvx-transaction-shards": HTMLMvxTransactionShardsElement;
        "mvx-transaction-toast": HTMLMvxTransactionToastElement;
        "mvx-transaction-toast-content": HTMLMvxTransactionToastContentElement;
        "mvx-transaction-toast-details": HTMLMvxTransactionToastDetailsElement;
        "mvx-transaction-toast-details-body": HTMLMvxTransactionToastDetailsBodyElement;
        "mvx-transaction-toast-progress": HTMLMvxTransactionToastProgressElement;
        "mvx-transaction-value": HTMLMvxTransactionValueElement;
        "mvx-transactions-table": HTMLMvxTransactionsTableElement;
        "mvx-trim-text": HTMLMvxTrimTextElement;
        "mvx-unlock-button": HTMLMvxUnlockButtonElement;
        "mvx-unlock-panel": HTMLMvxUnlockPanelElement;
        "mvx-wallet-connect": HTMLMvxWalletConnectElement;
        "mvx-wallet-connect-body": HTMLMvxWalletConnectBodyElement;
        "mvx-wallet-connect-panel": HTMLMvxWalletConnectPanelElement;
        "mvx-wallet-provider-icon": HTMLMvxWalletProviderIconElement;
        "mvx-xalias-provider-icon": HTMLMvxXaliasProviderIconElement;
        "mvx-xportal-download-qr-icon": HTMLMvxXportalDownloadQrIconElement;
        "mvx-xportal-qr-code-preloader": HTMLMvxXportalQrCodePreloaderElement;
    }
}
declare namespace LocalJSX {
    interface MvxArrowUpRightIcon {
    }
    interface MvxBackArrowIcon {
    }
    interface MvxBalanceComponent {
        "amount"?: string;
        "header"?: string;
        "ticker"?: string;
        "usdValue"?: string;
    }
    interface MvxCloseIcon {
    }
    interface MvxCopyButton {
        "class"?: string;
        "copyIcon"?: IconDefinition;
        "iconClass"?: string;
        "successIcon"?: IconDefinition;
        "text"?: string;
    }
    interface MvxCustomToast {
        "onDeleteToast"?: (event: MvxCustomToastCustomEvent<string>) => void;
        "toast"?: IComponentToast;
    }
    interface MvxDefaultTransactionIconLarge {
    }
    interface MvxDefaultTransactionIconSmall {
    }
    interface MvxExplorerLink {
        "class"?: string;
        "dataTestId"?: string;
        "icon"?: IconDefinition;
        "iconClass"?: string;
        "link"?: string;
        "text"?: string;
    }
    interface MvxExtensionProviderIcon {
    }
    interface MvxFaIcon {
        "class"?: string;
        "description"?: string;
        "icon"?: IconDefinition | string;
    }
    interface MvxFormatAmount {
        "class"?: string;
        "dataTestId"?: string;
        "isValid"?: boolean;
        "label"?: string;
        "labelClass"?: string;
        "showLabel"?: boolean;
        "valueDecimal"?: string;
        "valueInteger"?: string;
    }
    interface MvxFungibleComponent {
    }
    interface MvxGenericModal {
        "body"?: IGenericModalProps['body'];
        "modalSubtitle"?: IGenericModalProps['modalSubtitle'];
        "modalTitle"?: IGenericModalProps['modalTitle'];
        "onClose"?: (event: MvxGenericModalCustomEvent<any>) => void;
    }
    interface MvxGenericSpinner {
    }
    interface MvxGenericToast {
        "onDeleteToast"?: (event: MvxGenericToastCustomEvent<string>) => void;
        "toast"?: CustomToastType;
    }
    interface MvxLedgerAccountScreen {
        "accountScreenData"?: IAccountScreenData;
        "onAccessWallet"?: (event: MvxLedgerAccountScreenCustomEvent<any>) => void;
        "onNextPage"?: (event: MvxLedgerAccountScreenCustomEvent<any>) => void;
        "onPrevPage"?: (event: MvxLedgerAccountScreenCustomEvent<any>) => void;
        "onSelectAccount"?: (event: MvxLedgerAccountScreenCustomEvent<any>) => void;
        "selectedIndex"?: number;
    }
    interface MvxLedgerConfirmScreen {
        "confirmScreenData"?: IConfirmScreenData;
    }
    interface MvxLedgerConnect {
        "data"?: ILedgerConnectPanelData;
    }
    interface MvxLedgerConnectPanel {
        "data"?: ILedgerConnectPanelData;
    }
    interface MvxLedgerConnectScreen {
        "connectScreenData"?: IConnectScreenData;
        "onConnect"?: (event: MvxLedgerConnectScreenCustomEvent<any>) => void;
    }
    interface MvxLedgerProviderIcon {
    }
    interface MvxMetamaskProviderIcon {
    }
    interface MvxMultiversxLogoIcon {
    }
    interface MvxNotificationsFeed {
    }
    interface MvxPasskeyProviderIcon {
    }
    interface MvxPendingTransactionsPanel {
        "data"?: IPendingTransactionsPanelData;
    }
    interface MvxProviderButton {
        "class"?: string;
        "type"?: ProviderTypeEnum;
    }
    interface MvxSidePanel {
        "isOpen"?: boolean;
        "onBack"?: (event: MvxSidePanelCustomEvent<any>) => void;
        "onClose"?: (event: MvxSidePanelCustomEvent<any>) => void;
        "panelClassName"?: string;
        "panelTitle"?: string;
        "withBackButton"?: boolean;
    }
    interface MvxSignTransactionComponent {
        "header"?: VNode;
    }
    interface MvxSignTransactionsPanel {
        "data"?: ISignTransactionsPanelData;
    }
    interface MvxSimpleToast {
        "onDeleteToast"?: (event: MvxSimpleToastCustomEvent<void>) => void;
        "toast"?: ISimpleToast;
    }
    interface MvxToastList {
        "customToasts"?: CustomToastType1[];
        "transactionToasts"?: ITransactionToast[];
    }
    interface MvxTokenComponent {
    }
    interface MvxTransactionAccount {
        "account"?: ITransactionAccount;
        "class"?: string;
        "dataTestId"?: string;
        "scope"?: 'receiver' | 'sender';
        "showLockedAccounts"?: boolean;
    }
    interface MvxTransactionAccountName {
        "address"?: string;
        "class"?: string;
        "dataTestId"?: string;
        "description"?: string;
        "name"?: string;
    }
    interface MvxTransactionAge {
        "age"?: string;
        "class"?: string;
        "tooltip"?: string;
    }
    interface MvxTransactionDirectionBadge {
        "class"?: string;
        "direction"?: string;
    }
    interface MvxTransactionFeeComponent {
    }
    interface MvxTransactionHash {
        "class"?: string;
        "transaction"?: ITransactionsTableRow;
    }
    interface MvxTransactionIcon {
        "class"?: string;
        "iconInfo"?: ITransactionIconInfo;
    }
    interface MvxTransactionListItem {
        "transaction"?: ITransactionListItem;
    }
    interface MvxTransactionMethod {
        "actionDescription"?: string;
        "class"?: string;
        "method"?: string;
    }
    interface MvxTransactionShards {
        "class"?: string;
        "transaction"?: ITransactionsTableRow;
    }
    interface MvxTransactionToast {
        "fullWidth"?: boolean;
        "onDeleteToast"?: (event: MvxTransactionToastCustomEvent<void>) => void;
        "processedTransactionsStatus"?: string | JSX.Element;
        "toastDataState"?: IToastDataState;
        "toastId"?: string;
        "transactionProgressState"?: ITransactionProgressState;
        "transactions"?: ITransactionListItem[];
        "wrapperClass"?: string;
    }
    interface MvxTransactionToastContent {
        "fullWidth"?: boolean;
        "onDeleteToast"?: (event: MvxTransactionToastContentCustomEvent<void>) => void;
        "processedTransactionsStatus"?: string | JSX.Element;
        "toastDataState"?: IToastDataState;
        "transactions"?: ITransactionListItem[];
    }
    interface MvxTransactionToastDetails {
        "maxShownTransactions"?: number;
        "processedTransactionsStatus"?: string | JSX.Element;
        "transactionClass"?: string;
        "transactions"?: ITransactionListItem[];
    }
    interface MvxTransactionToastDetailsBody {
        "hash"?: string;
        "index"?: string;
        "link"?: string;
        "status"?: string;
        "transactionClass"?: string;
    }
    interface MvxTransactionToastProgress {
        "endTime"?: number;
        "startTime"?: number;
    }
    interface MvxTransactionValue {
        "class"?: string;
        "value"?: ITransactionValue;
    }
    interface MvxTransactionsTable {
        "class"?: string;
        "transactions"?: ITransactionsTableRow[];
    }
    interface MvxTrimText {
        "class"?: string;
        "dataTestId"?: string;
        "text"?: string;
    }
    interface MvxUnlockButton {
        "class"?: string;
        "icon"?: HTMLElement;
        "label"?: string;
        "type"?: ProviderTypeEnum;
    }
    interface MvxUnlockPanel {
        "allowedProviders"?: ProviderTypeEnum[];
        "isOpen"?: boolean;
        "onClose"?: (event: MvxUnlockPanelCustomEvent<any>) => void;
        "onLogin"?: (event: MvxUnlockPanelCustomEvent<{ provider: ProviderTypeEnum; anchor?: HTMLElement }>) => void;
    }
    interface MvxWalletConnect {
        "data"?: IWalletConnectPanelData;
    }
    interface MvxWalletConnectBody {
        "qrCodeSvg"?: string;
    }
    interface MvxWalletConnectPanel {
        "data"?: IWalletConnectPanelData;
    }
    interface MvxWalletProviderIcon {
    }
    interface MvxXaliasProviderIcon {
    }
    interface MvxXportalDownloadQrIcon {
    }
    interface MvxXportalQrCodePreloader {
        "class"?: string;
        "dataTestId"?: string;
    }
    interface IntrinsicElements {
        "mvx-arrow-up-right-icon": MvxArrowUpRightIcon;
        "mvx-back-arrow-icon": MvxBackArrowIcon;
        "mvx-balance-component": MvxBalanceComponent;
        "mvx-close-icon": MvxCloseIcon;
        "mvx-copy-button": MvxCopyButton;
        "mvx-custom-toast": MvxCustomToast;
        "mvx-default-transaction-icon-large": MvxDefaultTransactionIconLarge;
        "mvx-default-transaction-icon-small": MvxDefaultTransactionIconSmall;
        "mvx-explorer-link": MvxExplorerLink;
        "mvx-extension-provider-icon": MvxExtensionProviderIcon;
        "mvx-fa-icon": MvxFaIcon;
        "mvx-format-amount": MvxFormatAmount;
        "mvx-fungible-component": MvxFungibleComponent;
        "mvx-generic-modal": MvxGenericModal;
        "mvx-generic-spinner": MvxGenericSpinner;
        "mvx-generic-toast": MvxGenericToast;
        "mvx-ledger-account-screen": MvxLedgerAccountScreen;
        "mvx-ledger-confirm-screen": MvxLedgerConfirmScreen;
        "mvx-ledger-connect": MvxLedgerConnect;
        "mvx-ledger-connect-panel": MvxLedgerConnectPanel;
        "mvx-ledger-connect-screen": MvxLedgerConnectScreen;
        "mvx-ledger-provider-icon": MvxLedgerProviderIcon;
        "mvx-metamask-provider-icon": MvxMetamaskProviderIcon;
        "mvx-multiversx-logo-icon": MvxMultiversxLogoIcon;
        "mvx-notifications-feed": MvxNotificationsFeed;
        "mvx-passkey-provider-icon": MvxPasskeyProviderIcon;
        "mvx-pending-transactions-panel": MvxPendingTransactionsPanel;
        "mvx-provider-button": MvxProviderButton;
        "mvx-side-panel": MvxSidePanel;
        "mvx-sign-transaction-component": MvxSignTransactionComponent;
        "mvx-sign-transactions-panel": MvxSignTransactionsPanel;
        "mvx-simple-toast": MvxSimpleToast;
        "mvx-toast-list": MvxToastList;
        "mvx-token-component": MvxTokenComponent;
        "mvx-transaction-account": MvxTransactionAccount;
        "mvx-transaction-account-name": MvxTransactionAccountName;
        "mvx-transaction-age": MvxTransactionAge;
        "mvx-transaction-direction-badge": MvxTransactionDirectionBadge;
        "mvx-transaction-fee-component": MvxTransactionFeeComponent;
        "mvx-transaction-hash": MvxTransactionHash;
        "mvx-transaction-icon": MvxTransactionIcon;
        "mvx-transaction-list-item": MvxTransactionListItem;
        "mvx-transaction-method": MvxTransactionMethod;
        "mvx-transaction-shards": MvxTransactionShards;
        "mvx-transaction-toast": MvxTransactionToast;
        "mvx-transaction-toast-content": MvxTransactionToastContent;
        "mvx-transaction-toast-details": MvxTransactionToastDetails;
        "mvx-transaction-toast-details-body": MvxTransactionToastDetailsBody;
        "mvx-transaction-toast-progress": MvxTransactionToastProgress;
        "mvx-transaction-value": MvxTransactionValue;
        "mvx-transactions-table": MvxTransactionsTable;
        "mvx-trim-text": MvxTrimText;
        "mvx-unlock-button": MvxUnlockButton;
        "mvx-unlock-panel": MvxUnlockPanel;
        "mvx-wallet-connect": MvxWalletConnect;
        "mvx-wallet-connect-body": MvxWalletConnectBody;
        "mvx-wallet-connect-panel": MvxWalletConnectPanel;
        "mvx-wallet-provider-icon": MvxWalletProviderIcon;
        "mvx-xalias-provider-icon": MvxXaliasProviderIcon;
        "mvx-xportal-download-qr-icon": MvxXportalDownloadQrIcon;
        "mvx-xportal-qr-code-preloader": MvxXportalQrCodePreloader;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "mvx-arrow-up-right-icon": LocalJSX.MvxArrowUpRightIcon & JSXBase.HTMLAttributes<HTMLMvxArrowUpRightIconElement>;
            "mvx-back-arrow-icon": LocalJSX.MvxBackArrowIcon & JSXBase.HTMLAttributes<HTMLMvxBackArrowIconElement>;
            "mvx-balance-component": LocalJSX.MvxBalanceComponent & JSXBase.HTMLAttributes<HTMLMvxBalanceComponentElement>;
            "mvx-close-icon": LocalJSX.MvxCloseIcon & JSXBase.HTMLAttributes<HTMLMvxCloseIconElement>;
            "mvx-copy-button": LocalJSX.MvxCopyButton & JSXBase.HTMLAttributes<HTMLMvxCopyButtonElement>;
            "mvx-custom-toast": LocalJSX.MvxCustomToast & JSXBase.HTMLAttributes<HTMLMvxCustomToastElement>;
            "mvx-default-transaction-icon-large": LocalJSX.MvxDefaultTransactionIconLarge & JSXBase.HTMLAttributes<HTMLMvxDefaultTransactionIconLargeElement>;
            "mvx-default-transaction-icon-small": LocalJSX.MvxDefaultTransactionIconSmall & JSXBase.HTMLAttributes<HTMLMvxDefaultTransactionIconSmallElement>;
            "mvx-explorer-link": LocalJSX.MvxExplorerLink & JSXBase.HTMLAttributes<HTMLMvxExplorerLinkElement>;
            "mvx-extension-provider-icon": LocalJSX.MvxExtensionProviderIcon & JSXBase.HTMLAttributes<HTMLMvxExtensionProviderIconElement>;
            "mvx-fa-icon": LocalJSX.MvxFaIcon & JSXBase.HTMLAttributes<HTMLMvxFaIconElement>;
            "mvx-format-amount": LocalJSX.MvxFormatAmount & JSXBase.HTMLAttributes<HTMLMvxFormatAmountElement>;
            "mvx-fungible-component": LocalJSX.MvxFungibleComponent & JSXBase.HTMLAttributes<HTMLMvxFungibleComponentElement>;
            "mvx-generic-modal": LocalJSX.MvxGenericModal & JSXBase.HTMLAttributes<HTMLMvxGenericModalElement>;
            "mvx-generic-spinner": LocalJSX.MvxGenericSpinner & JSXBase.HTMLAttributes<HTMLMvxGenericSpinnerElement>;
            "mvx-generic-toast": LocalJSX.MvxGenericToast & JSXBase.HTMLAttributes<HTMLMvxGenericToastElement>;
            "mvx-ledger-account-screen": LocalJSX.MvxLedgerAccountScreen & JSXBase.HTMLAttributes<HTMLMvxLedgerAccountScreenElement>;
            "mvx-ledger-confirm-screen": LocalJSX.MvxLedgerConfirmScreen & JSXBase.HTMLAttributes<HTMLMvxLedgerConfirmScreenElement>;
            "mvx-ledger-connect": LocalJSX.MvxLedgerConnect & JSXBase.HTMLAttributes<HTMLMvxLedgerConnectElement>;
            "mvx-ledger-connect-panel": LocalJSX.MvxLedgerConnectPanel & JSXBase.HTMLAttributes<HTMLMvxLedgerConnectPanelElement>;
            "mvx-ledger-connect-screen": LocalJSX.MvxLedgerConnectScreen & JSXBase.HTMLAttributes<HTMLMvxLedgerConnectScreenElement>;
            "mvx-ledger-provider-icon": LocalJSX.MvxLedgerProviderIcon & JSXBase.HTMLAttributes<HTMLMvxLedgerProviderIconElement>;
            "mvx-metamask-provider-icon": LocalJSX.MvxMetamaskProviderIcon & JSXBase.HTMLAttributes<HTMLMvxMetamaskProviderIconElement>;
            "mvx-multiversx-logo-icon": LocalJSX.MvxMultiversxLogoIcon & JSXBase.HTMLAttributes<HTMLMvxMultiversxLogoIconElement>;
            "mvx-notifications-feed": LocalJSX.MvxNotificationsFeed & JSXBase.HTMLAttributes<HTMLMvxNotificationsFeedElement>;
            "mvx-passkey-provider-icon": LocalJSX.MvxPasskeyProviderIcon & JSXBase.HTMLAttributes<HTMLMvxPasskeyProviderIconElement>;
            "mvx-pending-transactions-panel": LocalJSX.MvxPendingTransactionsPanel & JSXBase.HTMLAttributes<HTMLMvxPendingTransactionsPanelElement>;
            "mvx-provider-button": LocalJSX.MvxProviderButton & JSXBase.HTMLAttributes<HTMLMvxProviderButtonElement>;
            "mvx-side-panel": LocalJSX.MvxSidePanel & JSXBase.HTMLAttributes<HTMLMvxSidePanelElement>;
            "mvx-sign-transaction-component": LocalJSX.MvxSignTransactionComponent & JSXBase.HTMLAttributes<HTMLMvxSignTransactionComponentElement>;
            "mvx-sign-transactions-panel": LocalJSX.MvxSignTransactionsPanel & JSXBase.HTMLAttributes<HTMLMvxSignTransactionsPanelElement>;
            "mvx-simple-toast": LocalJSX.MvxSimpleToast & JSXBase.HTMLAttributes<HTMLMvxSimpleToastElement>;
            "mvx-toast-list": LocalJSX.MvxToastList & JSXBase.HTMLAttributes<HTMLMvxToastListElement>;
            "mvx-token-component": LocalJSX.MvxTokenComponent & JSXBase.HTMLAttributes<HTMLMvxTokenComponentElement>;
            "mvx-transaction-account": LocalJSX.MvxTransactionAccount & JSXBase.HTMLAttributes<HTMLMvxTransactionAccountElement>;
            "mvx-transaction-account-name": LocalJSX.MvxTransactionAccountName & JSXBase.HTMLAttributes<HTMLMvxTransactionAccountNameElement>;
            "mvx-transaction-age": LocalJSX.MvxTransactionAge & JSXBase.HTMLAttributes<HTMLMvxTransactionAgeElement>;
            "mvx-transaction-direction-badge": LocalJSX.MvxTransactionDirectionBadge & JSXBase.HTMLAttributes<HTMLMvxTransactionDirectionBadgeElement>;
            "mvx-transaction-fee-component": LocalJSX.MvxTransactionFeeComponent & JSXBase.HTMLAttributes<HTMLMvxTransactionFeeComponentElement>;
            "mvx-transaction-hash": LocalJSX.MvxTransactionHash & JSXBase.HTMLAttributes<HTMLMvxTransactionHashElement>;
            "mvx-transaction-icon": LocalJSX.MvxTransactionIcon & JSXBase.HTMLAttributes<HTMLMvxTransactionIconElement>;
            "mvx-transaction-list-item": LocalJSX.MvxTransactionListItem & JSXBase.HTMLAttributes<HTMLMvxTransactionListItemElement>;
            "mvx-transaction-method": LocalJSX.MvxTransactionMethod & JSXBase.HTMLAttributes<HTMLMvxTransactionMethodElement>;
            "mvx-transaction-shards": LocalJSX.MvxTransactionShards & JSXBase.HTMLAttributes<HTMLMvxTransactionShardsElement>;
            "mvx-transaction-toast": LocalJSX.MvxTransactionToast & JSXBase.HTMLAttributes<HTMLMvxTransactionToastElement>;
            "mvx-transaction-toast-content": LocalJSX.MvxTransactionToastContent & JSXBase.HTMLAttributes<HTMLMvxTransactionToastContentElement>;
            "mvx-transaction-toast-details": LocalJSX.MvxTransactionToastDetails & JSXBase.HTMLAttributes<HTMLMvxTransactionToastDetailsElement>;
            "mvx-transaction-toast-details-body": LocalJSX.MvxTransactionToastDetailsBody & JSXBase.HTMLAttributes<HTMLMvxTransactionToastDetailsBodyElement>;
            "mvx-transaction-toast-progress": LocalJSX.MvxTransactionToastProgress & JSXBase.HTMLAttributes<HTMLMvxTransactionToastProgressElement>;
            "mvx-transaction-value": LocalJSX.MvxTransactionValue & JSXBase.HTMLAttributes<HTMLMvxTransactionValueElement>;
            "mvx-transactions-table": LocalJSX.MvxTransactionsTable & JSXBase.HTMLAttributes<HTMLMvxTransactionsTableElement>;
            "mvx-trim-text": LocalJSX.MvxTrimText & JSXBase.HTMLAttributes<HTMLMvxTrimTextElement>;
            "mvx-unlock-button": LocalJSX.MvxUnlockButton & JSXBase.HTMLAttributes<HTMLMvxUnlockButtonElement>;
            "mvx-unlock-panel": LocalJSX.MvxUnlockPanel & JSXBase.HTMLAttributes<HTMLMvxUnlockPanelElement>;
            "mvx-wallet-connect": LocalJSX.MvxWalletConnect & JSXBase.HTMLAttributes<HTMLMvxWalletConnectElement>;
            "mvx-wallet-connect-body": LocalJSX.MvxWalletConnectBody & JSXBase.HTMLAttributes<HTMLMvxWalletConnectBodyElement>;
            "mvx-wallet-connect-panel": LocalJSX.MvxWalletConnectPanel & JSXBase.HTMLAttributes<HTMLMvxWalletConnectPanelElement>;
            "mvx-wallet-provider-icon": LocalJSX.MvxWalletProviderIcon & JSXBase.HTMLAttributes<HTMLMvxWalletProviderIconElement>;
            "mvx-xalias-provider-icon": LocalJSX.MvxXaliasProviderIcon & JSXBase.HTMLAttributes<HTMLMvxXaliasProviderIconElement>;
            "mvx-xportal-download-qr-icon": LocalJSX.MvxXportalDownloadQrIcon & JSXBase.HTMLAttributes<HTMLMvxXportalDownloadQrIconElement>;
            "mvx-xportal-qr-code-preloader": LocalJSX.MvxXportalQrCodePreloader & JSXBase.HTMLAttributes<HTMLMvxXportalQrCodePreloaderElement>;
        }
    }
}
